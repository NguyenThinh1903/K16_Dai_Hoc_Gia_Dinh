{
	"info": {
		"_postman_id": "58f6941a-6408-4820-9619-f181ec380b77",
		"name": "33_22140341_Nguyễn_Trần_Hoàng_Thịnh",
		"description": "Access Forem articles, users and other resources via API.\n        For a real-world example of Forem in action, check out [DEV](https://www.dev.to).\n        All endpoints can be accessed with the 'api-key' header and a accept header, but\n        some of them are accessible publicly without authentication.\n\n        Dates and date times, unless otherwise specified, must be in\n        the [RFC 3339](https://tools.ietf.org/html/rfc3339) format.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "40674496"
	},
	"item": [
		{
			"name": "articles",
			"item": [
				{
					"name": "latest",
					"item": [
						{
							"name": "Published articles sorted by published date",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/articles/latest?page=1&per_page=30",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"articles",
										"latest"
									],
									"query": [
										{
											"key": "page",
											"value": "1",
											"description": "Pagination page"
										},
										{
											"key": "per_page",
											"value": "30",
											"description": "Page size (the number of items to return per page). The default maximum value can be overridden by \"API_PER_PAGE_MAX\" environment variable."
										}
									]
								},
								"description": "This endpoint allows the client to retrieve a list of articles. ordered by descending publish date.\n\nIt supports pagination, each page will contain 30 articles by default."
							},
							"response": [
								{
									"name": "A List of Articles",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "api-key",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/articles/latest?page=1&per_page=30",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"articles",
												"latest"
											],
											"query": [
												{
													"key": "page",
													"value": "1",
													"description": "Pagination page"
												},
												{
													"key": "per_page",
													"value": "30",
													"description": "Page size (the number of items to return per page). The default maximum value can be overridden by \"API_PER_PAGE_MAX\" environment variable."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"type_of\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"title\": \"<string>\",\n    \"description\": \"<string>\",\n    \"cover_image\": \"<string>\",\n    \"readable_publish_date\": \"<string>\",\n    \"social_image\": \"<string>\",\n    \"tag_list\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"tags\": \"<string>\",\n    \"slug\": \"<string>\",\n    \"path\": \"<string>\",\n    \"url\": \"<string>\",\n    \"canonical_url\": \"<string>\",\n    \"positive_reactions_count\": \"<integer>\",\n    \"public_reactions_count\": \"<integer>\",\n    \"created_at\": \"<dateTime>\",\n    \"edited_at\": \"<dateTime>\",\n    \"crossposted_at\": \"<dateTime>\",\n    \"published_at\": \"<dateTime>\",\n    \"last_comment_at\": \"<dateTime>\",\n    \"published_timestamp\": \"<dateTime>\",\n    \"user\": {\n      \"name\": \"<string>\",\n      \"username\": \"<string>\",\n      \"twitter_username\": \"<string>\",\n      \"github_username\": \"<string>\",\n      \"website_url\": \"<string>\",\n      \"profile_image\": \"<string>\",\n      \"profile_image_90\": \"<string>\"\n    },\n    \"reading_time_minutes\": \"<integer>\",\n    \"flare_tag\": {\n      \"name\": \"<string>\",\n      \"bg_color_hex\": \"<string>\",\n      \"text_color_hex\": \"<string>\"\n    },\n    \"organization\": {\n      \"name\": \"<string>\",\n      \"username\": \"<string>\",\n      \"slug\": \"<string>\",\n      \"profile_image\": \"<string>\",\n      \"profile_image_90\": \"<string>\"\n    }\n  },\n  {\n    \"type_of\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"title\": \"<string>\",\n    \"description\": \"<string>\",\n    \"cover_image\": \"<string>\",\n    \"readable_publish_date\": \"<string>\",\n    \"social_image\": \"<string>\",\n    \"tag_list\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"tags\": \"<string>\",\n    \"slug\": \"<string>\",\n    \"path\": \"<string>\",\n    \"url\": \"<string>\",\n    \"canonical_url\": \"<string>\",\n    \"positive_reactions_count\": \"<integer>\",\n    \"public_reactions_count\": \"<integer>\",\n    \"created_at\": \"<dateTime>\",\n    \"edited_at\": \"<dateTime>\",\n    \"crossposted_at\": \"<dateTime>\",\n    \"published_at\": \"<dateTime>\",\n    \"last_comment_at\": \"<dateTime>\",\n    \"published_timestamp\": \"<dateTime>\",\n    \"user\": {\n      \"name\": \"<string>\",\n      \"username\": \"<string>\",\n      \"twitter_username\": \"<string>\",\n      \"github_username\": \"<string>\",\n      \"website_url\": \"<string>\",\n      \"profile_image\": \"<string>\",\n      \"profile_image_90\": \"<string>\"\n    },\n    \"reading_time_minutes\": \"<integer>\",\n    \"flare_tag\": {\n      \"name\": \"<string>\",\n      \"bg_color_hex\": \"<string>\",\n      \"text_color_hex\": \"<string>\"\n    },\n    \"organization\": {\n      \"name\": \"<string>\",\n      \"username\": \"<string>\",\n      \"slug\": \"<string>\",\n      \"profile_image\": \"<string>\",\n      \"profile_image_90\": \"<string>\"\n    }\n  }\n]"
								}
							]
						}
					]
				},
				{
					"name": "{id}",
					"item": [
						{
							"name": "unpublish",
							"item": [
								{
									"name": "Unpublish an article",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/articles/:id/unpublish?note=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"articles",
												":id",
												"unpublish"
											],
											"query": [
												{
													"key": "note",
													"value": "<string>",
													"description": "Content for the note that's created along with unpublishing"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "<integer>",
													"description": "(Required) The ID of the article to unpublish."
												}
											]
										},
										"description": "This endpoint allows the client to unpublish an article.\n\nThe user associated with the API key must have any 'admin' or 'moderator' role.\n\nThe article will be unpublished and will no longer be visible to the public. It will remain\nin the database and will set back to draft status on the author's posts dashboard. Any\nnotifications associated with the article will be deleted. Any comments on the article\nwill remain."
									},
									"response": [
										{
											"name": "Article successfully unpublished",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "api-key",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/articles/:id/unpublish?note=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"articles",
														":id",
														"unpublish"
													],
													"query": [
														{
															"key": "note",
															"value": "<string>",
															"description": "Content for the note that's created along with unpublishing"
														}
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Unauthorized",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "api-key",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/articles/:id/unpublish?note=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"articles",
														":id",
														"unpublish"
													],
													"query": [
														{
															"key": "note",
															"value": "<string>",
															"description": "Content for the note that's created along with unpublishing"
														}
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"example\": {\n    \"error\": \"unauthorized\",\n    \"status\": 401\n  }\n}"
										},
										{
											"name": "Article Not Found",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "api-key",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/articles/:id/unpublish?note=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"articles",
														":id",
														"unpublish"
													],
													"query": [
														{
															"key": "note",
															"value": "<string>",
															"description": "Content for the note that's created along with unpublishing"
														}
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"example\": {\n    \"error\": \"not found\",\n    \"status\": 404\n  }\n}"
										}
									]
								}
							]
						},
						{
							"name": "Published article by id",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/articles/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"articles",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<integer>",
											"description": "(Required) "
										}
									]
								},
								"description": "This endpoint allows the client to retrieve a single published article given its `id`."
							},
							"response": [
								{
									"name": "An Article",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "api-key",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/articles/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"articles",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{}"
								},
								{
									"name": "Article Not Found",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "api-key",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/articles/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"articles",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"example\": {\n    \"error\": \"not found\",\n    \"status\": 404\n  }\n}"
								}
							]
						},
						{
							"name": "Update an article by id",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"article\": {\n    \"title\": \"<string>\",\n    \"body_markdown\": \"<string>\",\n    \"published\": false,\n    \"series\": \"<string>\",\n    \"main_image\": \"<string>\",\n    \"canonical_url\": \"<string>\",\n    \"description\": \"<string>\",\n    \"tags\": \"<string>\",\n    \"organization_id\": \"<integer>\"\n  }\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/articles/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"articles",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<integer>",
											"description": "(Required) The ID of the user to unpublish."
										}
									]
								},
								"description": "This endpoint allows the client to update an existing article.\n\n\"Articles\" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code."
							},
							"response": [
								{
									"name": "An Article",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "api-key",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"article\": {\n    \"title\": \"<string>\",\n    \"body_markdown\": \"<string>\",\n    \"published\": false,\n    \"series\": \"<string>\",\n    \"main_image\": \"<string>\",\n    \"canonical_url\": \"<string>\",\n    \"description\": \"<string>\",\n    \"tags\": \"<string>\",\n    \"organization_id\": \"<integer>\"\n  }\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/articles/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"articles",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"example\": {\n    \"type_of\": \"article\",\n    \"id\": 259,\n    \"title\": \"Noli Me Tangere180\",\n    \"description\": \"Hoodie meh knausgaard bespoke actually shabby chic polaroid. Tumblr ennui semiotics freegan diy...\",\n    \"readable_publish_date\": \"Apr 14\",\n    \"slug\": \"noli-me-tangere180-55bp\",\n    \"path\": \"/username392/noli-me-tangere180-55bp\",\n    \"url\": \"http://localhost:3000/username392/noli-me-tangere180-55bp\",\n    \"comments_count\": 0,\n    \"public_reactions_count\": 0,\n    \"published_timestamp\": \"2023-04-14T14:45:33Z\",\n    \"positive_reactions_count\": 0,\n    \"cover_image\": \"http://localhost:3000/assets/3-93b6b57b5a6115cffe5d63d29a22825eb9e65f647bfef57a88244bc2b98186f0.png\",\n    \"social_image\": \"http://localhost:3000/assets/3-93b6b57b5a6115cffe5d63d29a22825eb9e65f647bfef57a88244bc2b98186f0.png\",\n    \"canonical_url\": \"http://localhost:3000/username392/noli-me-tangere180-55bp\",\n    \"created_at\": \"2023-04-14T14:45:33Z\",\n    \"edited_at\": \"2023-04-14T14:45:33Z\",\n    \"published_at\": \"2023-04-14T14:45:33Z\",\n    \"last_comment_at\": \"2023-04-14T14:45:33Z\",\n    \"reading_time_minutes\": 1,\n    \"tag_list\": \"\",\n    \"tags\": [],\n    \"body_html\": \"<p><strong>New</strong> body for the article</p>\\n\\n\",\n    \"body_markdown\": \"**New** body for the article\",\n    \"user\": {\n      \"name\": \"Lai \\\"Aide\\\" \\\\:/ Will\",\n      \"username\": \"username392\",\n      \"twitter_username\": \"twitter392\",\n      \"github_username\": \"github392\",\n      \"user_id\": 1313,\n      \"profile_image\": \"/uploads/user/profile_image/1313/731805e8-95f2-4260-89f1-489df0c9e945.jpeg\",\n      \"profile_image_90\": \"/uploads/user/profile_image/1313/731805e8-95f2-4260-89f1-489df0c9e945.jpeg\"\n    }\n  }\n}"
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "api-key",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"article\": {\n    \"title\": \"<string>\",\n    \"body_markdown\": \"<string>\",\n    \"published\": false,\n    \"series\": \"<string>\",\n    \"main_image\": \"<string>\",\n    \"canonical_url\": \"<string>\",\n    \"description\": \"<string>\",\n    \"tags\": \"<string>\",\n    \"organization_id\": \"<integer>\"\n  }\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/articles/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"articles",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"example\": {\n    \"error\": \"unauthorized\",\n    \"status\": 401\n  }\n}"
								},
								{
									"name": "Article Not Found",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "api-key",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"article\": {\n    \"title\": \"<string>\",\n    \"body_markdown\": \"<string>\",\n    \"published\": false,\n    \"series\": \"<string>\",\n    \"main_image\": \"<string>\",\n    \"canonical_url\": \"<string>\",\n    \"description\": \"<string>\",\n    \"tags\": \"<string>\",\n    \"organization_id\": \"<integer>\"\n  }\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/articles/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"articles",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"example\": {\n    \"error\": \"not found\",\n    \"status\": 404\n  }\n}"
								},
								{
									"name": "Unprocessable Entity",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "api-key",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"article\": {\n    \"title\": \"<string>\",\n    \"body_markdown\": \"<string>\",\n    \"published\": false,\n    \"series\": \"<string>\",\n    \"main_image\": \"<string>\",\n    \"canonical_url\": \"<string>\",\n    \"description\": \"<string>\",\n    \"tags\": \"<string>\",\n    \"organization_id\": \"<integer>\"\n  }\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/articles/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"articles",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"example\": {\n    \"error\": \"param is missing or the value is empty: article\",\n    \"status\": 422\n  }\n}"
								}
							]
						}
					]
				},
				{
					"name": "{username}",
					"item": [
						{
							"name": "{slug}",
							"item": [
								{
									"name": "Published article by path",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/articles/:username/:slug",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"articles",
												":username",
												":slug"
											],
											"variable": [
												{
													"key": "username",
													"value": "<string>",
													"description": "(Required) "
												},
												{
													"key": "slug",
													"value": "<string>",
													"description": "(Required) "
												}
											]
										},
										"description": "This endpoint allows the client to retrieve a single published article given its `path`."
									},
									"response": [
										{
											"name": "An Article",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "api-key",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/articles/:username/:slug",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"articles",
														":username",
														":slug"
													],
													"variable": [
														{
															"key": "username"
														},
														{
															"key": "slug"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{}"
										},
										{
											"name": "Article Not Found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "api-key",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/articles/:username/:slug",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"articles",
														":username",
														":slug"
													],
													"variable": [
														{
															"key": "username"
														},
														{
															"key": "slug"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"example\": {\n    \"error\": \"not found\",\n    \"status\": 404\n  }\n}"
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "me",
					"item": [
						{
							"name": "published",
							"item": [
								{
									"name": "User's published articles",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/articles/me/published?page=1&per_page=30",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"articles",
												"me",
												"published"
											],
											"query": [
												{
													"key": "page",
													"value": "1",
													"description": "Pagination page"
												},
												{
													"key": "per_page",
													"value": "30",
													"description": "Page size (the number of items to return per page). The default maximum value can be overridden by \"API_PER_PAGE_MAX\" environment variable."
												}
											]
										},
										"description": "This endpoint allows the client to retrieve a list of published articles on behalf of an authenticated user.\n\n\"Articles\" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.\n\nPublished articles will be in reverse chronological publication order.\n\nIt will return published articles with pagination. By default a page will contain 30 articles."
									},
									"response": [
										{
											"name": "A List of the authenticated user's Articles",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "api-key",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/articles/me/published?page=1&per_page=30",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"articles",
														"me",
														"published"
													],
													"query": [
														{
															"key": "page",
															"value": "1",
															"description": "Pagination page"
														},
														{
															"key": "per_page",
															"value": "30",
															"description": "Page size (the number of items to return per page). The default maximum value can be overridden by \"API_PER_PAGE_MAX\" environment variable."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"type_of\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"title\": \"<string>\",\n    \"description\": \"<string>\",\n    \"cover_image\": \"<string>\",\n    \"readable_publish_date\": \"<string>\",\n    \"social_image\": \"<string>\",\n    \"tag_list\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"tags\": \"<string>\",\n    \"slug\": \"<string>\",\n    \"path\": \"<string>\",\n    \"url\": \"<string>\",\n    \"canonical_url\": \"<string>\",\n    \"positive_reactions_count\": \"<integer>\",\n    \"public_reactions_count\": \"<integer>\",\n    \"created_at\": \"<dateTime>\",\n    \"edited_at\": \"<dateTime>\",\n    \"crossposted_at\": \"<dateTime>\",\n    \"published_at\": \"<dateTime>\",\n    \"last_comment_at\": \"<dateTime>\",\n    \"published_timestamp\": \"<dateTime>\",\n    \"user\": {\n      \"name\": \"<string>\",\n      \"username\": \"<string>\",\n      \"twitter_username\": \"<string>\",\n      \"github_username\": \"<string>\",\n      \"website_url\": \"<string>\",\n      \"profile_image\": \"<string>\",\n      \"profile_image_90\": \"<string>\"\n    },\n    \"reading_time_minutes\": \"<integer>\",\n    \"flare_tag\": {\n      \"name\": \"<string>\",\n      \"bg_color_hex\": \"<string>\",\n      \"text_color_hex\": \"<string>\"\n    },\n    \"organization\": {\n      \"name\": \"<string>\",\n      \"username\": \"<string>\",\n      \"slug\": \"<string>\",\n      \"profile_image\": \"<string>\",\n      \"profile_image_90\": \"<string>\"\n    }\n  },\n  {\n    \"type_of\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"title\": \"<string>\",\n    \"description\": \"<string>\",\n    \"cover_image\": \"<string>\",\n    \"readable_publish_date\": \"<string>\",\n    \"social_image\": \"<string>\",\n    \"tag_list\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"tags\": \"<string>\",\n    \"slug\": \"<string>\",\n    \"path\": \"<string>\",\n    \"url\": \"<string>\",\n    \"canonical_url\": \"<string>\",\n    \"positive_reactions_count\": \"<integer>\",\n    \"public_reactions_count\": \"<integer>\",\n    \"created_at\": \"<dateTime>\",\n    \"edited_at\": \"<dateTime>\",\n    \"crossposted_at\": \"<dateTime>\",\n    \"published_at\": \"<dateTime>\",\n    \"last_comment_at\": \"<dateTime>\",\n    \"published_timestamp\": \"<dateTime>\",\n    \"user\": {\n      \"name\": \"<string>\",\n      \"username\": \"<string>\",\n      \"twitter_username\": \"<string>\",\n      \"github_username\": \"<string>\",\n      \"website_url\": \"<string>\",\n      \"profile_image\": \"<string>\",\n      \"profile_image_90\": \"<string>\"\n    },\n    \"reading_time_minutes\": \"<integer>\",\n    \"flare_tag\": {\n      \"name\": \"<string>\",\n      \"bg_color_hex\": \"<string>\",\n      \"text_color_hex\": \"<string>\"\n    },\n    \"organization\": {\n      \"name\": \"<string>\",\n      \"username\": \"<string>\",\n      \"slug\": \"<string>\",\n      \"profile_image\": \"<string>\",\n      \"profile_image_90\": \"<string>\"\n    }\n  }\n]"
										},
										{
											"name": "Unauthorized",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "api-key",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/articles/me/published?page=1&per_page=30",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"articles",
														"me",
														"published"
													],
													"query": [
														{
															"key": "page",
															"value": "1",
															"description": "Pagination page"
														},
														{
															"key": "per_page",
															"value": "30",
															"description": "Page size (the number of items to return per page). The default maximum value can be overridden by \"API_PER_PAGE_MAX\" environment variable."
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"example\": {\n    \"error\": \"unauthorized\",\n    \"status\": 401\n  }\n}"
										}
									]
								}
							]
						},
						{
							"name": "unpublished",
							"item": [
								{
									"name": "User's unpublished articles",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/articles/me/unpublished?page=1&per_page=30",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"articles",
												"me",
												"unpublished"
											],
											"query": [
												{
													"key": "page",
													"value": "1",
													"description": "Pagination page"
												},
												{
													"key": "per_page",
													"value": "30",
													"description": "Page size (the number of items to return per page). The default maximum value can be overridden by \"API_PER_PAGE_MAX\" environment variable."
												}
											]
										},
										"description": "This endpoint allows the client to retrieve a list of unpublished articles on behalf of an authenticated user.\n\n\"Articles\" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.\n\nUnpublished articles will be in reverse chronological creation order.\n\nIt will return unpublished articles with pagination. By default a page will contain 30 articles."
									},
									"response": [
										{
											"name": "A List of the authenticated user's Articles",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "api-key",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/articles/me/unpublished?page=1&per_page=30",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"articles",
														"me",
														"unpublished"
													],
													"query": [
														{
															"key": "page",
															"value": "1",
															"description": "Pagination page"
														},
														{
															"key": "per_page",
															"value": "30",
															"description": "Page size (the number of items to return per page). The default maximum value can be overridden by \"API_PER_PAGE_MAX\" environment variable."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"type_of\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"title\": \"<string>\",\n    \"description\": \"<string>\",\n    \"cover_image\": \"<string>\",\n    \"readable_publish_date\": \"<string>\",\n    \"social_image\": \"<string>\",\n    \"tag_list\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"tags\": \"<string>\",\n    \"slug\": \"<string>\",\n    \"path\": \"<string>\",\n    \"url\": \"<string>\",\n    \"canonical_url\": \"<string>\",\n    \"positive_reactions_count\": \"<integer>\",\n    \"public_reactions_count\": \"<integer>\",\n    \"created_at\": \"<dateTime>\",\n    \"edited_at\": \"<dateTime>\",\n    \"crossposted_at\": \"<dateTime>\",\n    \"published_at\": \"<dateTime>\",\n    \"last_comment_at\": \"<dateTime>\",\n    \"published_timestamp\": \"<dateTime>\",\n    \"user\": {\n      \"name\": \"<string>\",\n      \"username\": \"<string>\",\n      \"twitter_username\": \"<string>\",\n      \"github_username\": \"<string>\",\n      \"website_url\": \"<string>\",\n      \"profile_image\": \"<string>\",\n      \"profile_image_90\": \"<string>\"\n    },\n    \"reading_time_minutes\": \"<integer>\",\n    \"flare_tag\": {\n      \"name\": \"<string>\",\n      \"bg_color_hex\": \"<string>\",\n      \"text_color_hex\": \"<string>\"\n    },\n    \"organization\": {\n      \"name\": \"<string>\",\n      \"username\": \"<string>\",\n      \"slug\": \"<string>\",\n      \"profile_image\": \"<string>\",\n      \"profile_image_90\": \"<string>\"\n    }\n  },\n  {\n    \"type_of\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"title\": \"<string>\",\n    \"description\": \"<string>\",\n    \"cover_image\": \"<string>\",\n    \"readable_publish_date\": \"<string>\",\n    \"social_image\": \"<string>\",\n    \"tag_list\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"tags\": \"<string>\",\n    \"slug\": \"<string>\",\n    \"path\": \"<string>\",\n    \"url\": \"<string>\",\n    \"canonical_url\": \"<string>\",\n    \"positive_reactions_count\": \"<integer>\",\n    \"public_reactions_count\": \"<integer>\",\n    \"created_at\": \"<dateTime>\",\n    \"edited_at\": \"<dateTime>\",\n    \"crossposted_at\": \"<dateTime>\",\n    \"published_at\": \"<dateTime>\",\n    \"last_comment_at\": \"<dateTime>\",\n    \"published_timestamp\": \"<dateTime>\",\n    \"user\": {\n      \"name\": \"<string>\",\n      \"username\": \"<string>\",\n      \"twitter_username\": \"<string>\",\n      \"github_username\": \"<string>\",\n      \"website_url\": \"<string>\",\n      \"profile_image\": \"<string>\",\n      \"profile_image_90\": \"<string>\"\n    },\n    \"reading_time_minutes\": \"<integer>\",\n    \"flare_tag\": {\n      \"name\": \"<string>\",\n      \"bg_color_hex\": \"<string>\",\n      \"text_color_hex\": \"<string>\"\n    },\n    \"organization\": {\n      \"name\": \"<string>\",\n      \"username\": \"<string>\",\n      \"slug\": \"<string>\",\n      \"profile_image\": \"<string>\",\n      \"profile_image_90\": \"<string>\"\n    }\n  }\n]"
										},
										{
											"name": "Unauthorized",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "api-key",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/articles/me/unpublished?page=1&per_page=30",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"articles",
														"me",
														"unpublished"
													],
													"query": [
														{
															"key": "page",
															"value": "1",
															"description": "Pagination page"
														},
														{
															"key": "per_page",
															"value": "30",
															"description": "Page size (the number of items to return per page). The default maximum value can be overridden by \"API_PER_PAGE_MAX\" environment variable."
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"example\": {\n    \"error\": \"unauthorized\",\n    \"status\": 401\n  }\n}"
										}
									]
								}
							]
						},
						{
							"name": "all",
							"item": [
								{
									"name": "User's all articles",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/articles/me/all?page=1&per_page=30",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"articles",
												"me",
												"all"
											],
											"query": [
												{
													"key": "page",
													"value": "1",
													"description": "Pagination page"
												},
												{
													"key": "per_page",
													"value": "30",
													"description": "Page size (the number of items to return per page). The default maximum value can be overridden by \"API_PER_PAGE_MAX\" environment variable."
												}
											]
										},
										"description": "This endpoint allows the client to retrieve a list of all articles on behalf of an authenticated user.\n\n\"Articles\" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.\n\nIt will return both published and unpublished articles with pagination.\n\nUnpublished articles will be at the top of the list in reverse chronological creation order. Published articles will follow in reverse chronological publication order.\n\nBy default a page will contain 30 articles."
									},
									"response": [
										{
											"name": "A List of the authenticated user's Articles",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "api-key",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/articles/me/all?page=1&per_page=30",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"articles",
														"me",
														"all"
													],
													"query": [
														{
															"key": "page",
															"value": "1",
															"description": "Pagination page"
														},
														{
															"key": "per_page",
															"value": "30",
															"description": "Page size (the number of items to return per page). The default maximum value can be overridden by \"API_PER_PAGE_MAX\" environment variable."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"type_of\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"title\": \"<string>\",\n    \"description\": \"<string>\",\n    \"cover_image\": \"<string>\",\n    \"readable_publish_date\": \"<string>\",\n    \"social_image\": \"<string>\",\n    \"tag_list\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"tags\": \"<string>\",\n    \"slug\": \"<string>\",\n    \"path\": \"<string>\",\n    \"url\": \"<string>\",\n    \"canonical_url\": \"<string>\",\n    \"positive_reactions_count\": \"<integer>\",\n    \"public_reactions_count\": \"<integer>\",\n    \"created_at\": \"<dateTime>\",\n    \"edited_at\": \"<dateTime>\",\n    \"crossposted_at\": \"<dateTime>\",\n    \"published_at\": \"<dateTime>\",\n    \"last_comment_at\": \"<dateTime>\",\n    \"published_timestamp\": \"<dateTime>\",\n    \"user\": {\n      \"name\": \"<string>\",\n      \"username\": \"<string>\",\n      \"twitter_username\": \"<string>\",\n      \"github_username\": \"<string>\",\n      \"website_url\": \"<string>\",\n      \"profile_image\": \"<string>\",\n      \"profile_image_90\": \"<string>\"\n    },\n    \"reading_time_minutes\": \"<integer>\",\n    \"flare_tag\": {\n      \"name\": \"<string>\",\n      \"bg_color_hex\": \"<string>\",\n      \"text_color_hex\": \"<string>\"\n    },\n    \"organization\": {\n      \"name\": \"<string>\",\n      \"username\": \"<string>\",\n      \"slug\": \"<string>\",\n      \"profile_image\": \"<string>\",\n      \"profile_image_90\": \"<string>\"\n    }\n  },\n  {\n    \"type_of\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"title\": \"<string>\",\n    \"description\": \"<string>\",\n    \"cover_image\": \"<string>\",\n    \"readable_publish_date\": \"<string>\",\n    \"social_image\": \"<string>\",\n    \"tag_list\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"tags\": \"<string>\",\n    \"slug\": \"<string>\",\n    \"path\": \"<string>\",\n    \"url\": \"<string>\",\n    \"canonical_url\": \"<string>\",\n    \"positive_reactions_count\": \"<integer>\",\n    \"public_reactions_count\": \"<integer>\",\n    \"created_at\": \"<dateTime>\",\n    \"edited_at\": \"<dateTime>\",\n    \"crossposted_at\": \"<dateTime>\",\n    \"published_at\": \"<dateTime>\",\n    \"last_comment_at\": \"<dateTime>\",\n    \"published_timestamp\": \"<dateTime>\",\n    \"user\": {\n      \"name\": \"<string>\",\n      \"username\": \"<string>\",\n      \"twitter_username\": \"<string>\",\n      \"github_username\": \"<string>\",\n      \"website_url\": \"<string>\",\n      \"profile_image\": \"<string>\",\n      \"profile_image_90\": \"<string>\"\n    },\n    \"reading_time_minutes\": \"<integer>\",\n    \"flare_tag\": {\n      \"name\": \"<string>\",\n      \"bg_color_hex\": \"<string>\",\n      \"text_color_hex\": \"<string>\"\n    },\n    \"organization\": {\n      \"name\": \"<string>\",\n      \"username\": \"<string>\",\n      \"slug\": \"<string>\",\n      \"profile_image\": \"<string>\",\n      \"profile_image_90\": \"<string>\"\n    }\n  }\n]"
										},
										{
											"name": "Unauthorized",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "api-key",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/articles/me/all?page=1&per_page=30",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"articles",
														"me",
														"all"
													],
													"query": [
														{
															"key": "page",
															"value": "1",
															"description": "Pagination page"
														},
														{
															"key": "per_page",
															"value": "30",
															"description": "Page size (the number of items to return per page). The default maximum value can be overridden by \"API_PER_PAGE_MAX\" environment variable."
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"example\": {\n    \"error\": \"unauthorized\",\n    \"status\": 401\n  }\n}"
										}
									]
								}
							]
						},
						{
							"name": "User's articles",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/articles/me?page=1&per_page=30",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"articles",
										"me"
									],
									"query": [
										{
											"key": "page",
											"value": "1",
											"description": "Pagination page"
										},
										{
											"key": "per_page",
											"value": "30",
											"description": "Page size (the number of items to return per page). The default maximum value can be overridden by \"API_PER_PAGE_MAX\" environment variable."
										}
									]
								},
								"description": "This endpoint allows the client to retrieve a list of published articles on behalf of an authenticated user.\n\n\"Articles\" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.\n\nPublished articles will be in reverse chronological publication order.\n\nIt will return published articles with pagination. By default a page will contain 30 articles."
							},
							"response": [
								{
									"name": "A List of the authenticated user's Articles",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "api-key",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/articles/me?page=1&per_page=30",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"articles",
												"me"
											],
											"query": [
												{
													"key": "page",
													"value": "1",
													"description": "Pagination page"
												},
												{
													"key": "per_page",
													"value": "30",
													"description": "Page size (the number of items to return per page). The default maximum value can be overridden by \"API_PER_PAGE_MAX\" environment variable."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"type_of\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"title\": \"<string>\",\n    \"description\": \"<string>\",\n    \"cover_image\": \"<string>\",\n    \"readable_publish_date\": \"<string>\",\n    \"social_image\": \"<string>\",\n    \"tag_list\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"tags\": \"<string>\",\n    \"slug\": \"<string>\",\n    \"path\": \"<string>\",\n    \"url\": \"<string>\",\n    \"canonical_url\": \"<string>\",\n    \"positive_reactions_count\": \"<integer>\",\n    \"public_reactions_count\": \"<integer>\",\n    \"created_at\": \"<dateTime>\",\n    \"edited_at\": \"<dateTime>\",\n    \"crossposted_at\": \"<dateTime>\",\n    \"published_at\": \"<dateTime>\",\n    \"last_comment_at\": \"<dateTime>\",\n    \"published_timestamp\": \"<dateTime>\",\n    \"user\": {\n      \"name\": \"<string>\",\n      \"username\": \"<string>\",\n      \"twitter_username\": \"<string>\",\n      \"github_username\": \"<string>\",\n      \"website_url\": \"<string>\",\n      \"profile_image\": \"<string>\",\n      \"profile_image_90\": \"<string>\"\n    },\n    \"reading_time_minutes\": \"<integer>\",\n    \"flare_tag\": {\n      \"name\": \"<string>\",\n      \"bg_color_hex\": \"<string>\",\n      \"text_color_hex\": \"<string>\"\n    },\n    \"organization\": {\n      \"name\": \"<string>\",\n      \"username\": \"<string>\",\n      \"slug\": \"<string>\",\n      \"profile_image\": \"<string>\",\n      \"profile_image_90\": \"<string>\"\n    }\n  },\n  {\n    \"type_of\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"title\": \"<string>\",\n    \"description\": \"<string>\",\n    \"cover_image\": \"<string>\",\n    \"readable_publish_date\": \"<string>\",\n    \"social_image\": \"<string>\",\n    \"tag_list\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"tags\": \"<string>\",\n    \"slug\": \"<string>\",\n    \"path\": \"<string>\",\n    \"url\": \"<string>\",\n    \"canonical_url\": \"<string>\",\n    \"positive_reactions_count\": \"<integer>\",\n    \"public_reactions_count\": \"<integer>\",\n    \"created_at\": \"<dateTime>\",\n    \"edited_at\": \"<dateTime>\",\n    \"crossposted_at\": \"<dateTime>\",\n    \"published_at\": \"<dateTime>\",\n    \"last_comment_at\": \"<dateTime>\",\n    \"published_timestamp\": \"<dateTime>\",\n    \"user\": {\n      \"name\": \"<string>\",\n      \"username\": \"<string>\",\n      \"twitter_username\": \"<string>\",\n      \"github_username\": \"<string>\",\n      \"website_url\": \"<string>\",\n      \"profile_image\": \"<string>\",\n      \"profile_image_90\": \"<string>\"\n    },\n    \"reading_time_minutes\": \"<integer>\",\n    \"flare_tag\": {\n      \"name\": \"<string>\",\n      \"bg_color_hex\": \"<string>\",\n      \"text_color_hex\": \"<string>\"\n    },\n    \"organization\": {\n      \"name\": \"<string>\",\n      \"username\": \"<string>\",\n      \"slug\": \"<string>\",\n      \"profile_image\": \"<string>\",\n      \"profile_image_90\": \"<string>\"\n    }\n  }\n]"
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "api-key",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/articles/me?page=1&per_page=30",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"articles",
												"me"
											],
											"query": [
												{
													"key": "page",
													"value": "1",
													"description": "Pagination page"
												},
												{
													"key": "per_page",
													"value": "30",
													"description": "Page size (the number of items to return per page). The default maximum value can be overridden by \"API_PER_PAGE_MAX\" environment variable."
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"example\": {\n    \"error\": \"unauthorized\",\n    \"status\": 401\n  }\n}"
								}
							]
						}
					]
				},
				{
					"name": "Publish article",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"article\": {\n    \"title\": \"<string>\",\n    \"body_markdown\": \"<string>\",\n    \"published\": false,\n    \"series\": \"<string>\",\n    \"main_image\": \"<string>\",\n    \"canonical_url\": \"<string>\",\n    \"description\": \"<string>\",\n    \"tags\": \"<string>\",\n    \"organization_id\": \"<integer>\"\n  }\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/articles",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"articles"
							]
						},
						"description": "This endpoint allows the client to create a new article.\n\n\"Articles\" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code."
					},
					"response": [
						{
							"name": "An Article",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "api-key",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"article\": {\n    \"title\": \"<string>\",\n    \"body_markdown\": \"<string>\",\n    \"published\": false,\n    \"series\": \"<string>\",\n    \"main_image\": \"<string>\",\n    \"canonical_url\": \"<string>\",\n    \"description\": \"<string>\",\n    \"tags\": \"<string>\",\n    \"organization_id\": \"<integer>\"\n  }\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/articles",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"articles"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"example\": {\n    \"type_of\": \"article\",\n    \"id\": 251,\n    \"title\": \"New article\",\n    \"description\": \"New post example\",\n    \"readable_publish_date\": \"Apr 14\",\n    \"slug\": \"new-article-4aca\",\n    \"path\": \"/username383/new-article-4aca\",\n    \"url\": \"http://localhost:3000/username383/new-article-4aca\",\n    \"comments_count\": 0,\n    \"public_reactions_count\": 0,\n    \"collection_id\": 11,\n    \"published_timestamp\": \"2023-04-14T14:45:32Z\",\n    \"positive_reactions_count\": 0,\n    \"cover_image\": \"https://thepracticaldev.s3.amazonaws.com/i/5wfo25724gzgk5e5j50g.jpg\",\n    \"social_image\": \"https://thepracticaldev.s3.amazonaws.com/i/5wfo25724gzgk5e5j50g.jpg\",\n    \"canonical_url\": \"https://dev.to/fdocr/headless-chrome-dual-mode-tests-for-ruby-on-rails-4p6g\",\n    \"created_at\": \"2023-04-14T14:45:32Z\",\n    \"published_at\": \"2023-04-14T14:45:32Z\",\n    \"last_comment_at\": \"2023-04-14T14:45:32Z\",\n    \"reading_time_minutes\": 1,\n    \"tag_list\": \"\",\n    \"tags\": [],\n    \"body_html\": \"<p><strong>New</strong> body for the article</p>\\n\\n\",\n    \"body_markdown\": \"**New** body for the article\",\n    \"user\": {\n      \"name\": \"Nu \\\"Otis\\\" \\\\:/ Stehr\",\n      \"username\": \"username383\",\n      \"twitter_username\": \"twitter383\",\n      \"github_username\": \"github383\",\n      \"user_id\": 1304,\n      \"profile_image\": \"/uploads/user/profile_image/1304/ceaf627b-1551-4771-8d35-a93b40989584.jpeg\",\n      \"profile_image_90\": \"/uploads/user/profile_image/1304/ceaf627b-1551-4771-8d35-a93b40989584.jpeg\"\n    }\n  }\n}"
						},
						{
							"name": "Unauthorized",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "api-key",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"article\": {\n    \"title\": \"<string>\",\n    \"body_markdown\": \"<string>\",\n    \"published\": false,\n    \"series\": \"<string>\",\n    \"main_image\": \"<string>\",\n    \"canonical_url\": \"<string>\",\n    \"description\": \"<string>\",\n    \"tags\": \"<string>\",\n    \"organization_id\": \"<integer>\"\n  }\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/articles",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"articles"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"example\": {\n    \"error\": \"unauthorized\",\n    \"status\": 401\n  }\n}"
						},
						{
							"name": "Unprocessable Entity",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "api-key",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"article\": {\n    \"title\": \"<string>\",\n    \"body_markdown\": \"<string>\",\n    \"published\": false,\n    \"series\": \"<string>\",\n    \"main_image\": \"<string>\",\n    \"canonical_url\": \"<string>\",\n    \"description\": \"<string>\",\n    \"tags\": \"<string>\",\n    \"organization_id\": \"<integer>\"\n  }\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/articles",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"articles"
									]
								}
							},
							"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
							"code": 422,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"example\": {\n    \"error\": \"param is missing or the value is empty: article\",\n    \"status\": 422\n  }\n}"
						}
					]
				},
				{
					"name": "Published articles",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/articles?page=1&per_page=30&tag=<string>&tags=<string>&tags_exclude=<string>&username=<string>&state=fresh&top=<integer>&collection_id=<integer>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"articles"
							],
							"query": [
								{
									"key": "page",
									"value": "1",
									"description": "Pagination page"
								},
								{
									"key": "per_page",
									"value": "30",
									"description": "Page size (the number of items to return per page). The default maximum value can be overridden by \"API_PER_PAGE_MAX\" environment variable."
								},
								{
									"key": "tag",
									"value": "<string>",
									"description": "Using this parameter will retrieve articles that contain the requested tag. Articles\nwill be ordered by descending popularity.This parameter can be used in conjuction with `top`."
								},
								{
									"key": "tags",
									"value": "<string>",
									"description": "Using this parameter will retrieve articles with any of the comma-separated tags.\nArticles will be ordered by descending popularity."
								},
								{
									"key": "tags_exclude",
									"value": "<string>",
									"description": "Using this parameter will retrieve articles that do _not_ contain _any_\nof comma-separated tags. Articles will be ordered by descending popularity."
								},
								{
									"key": "username",
									"value": "<string>",
									"description": "Using this parameter will retrieve articles belonging\n            to a User or Organization ordered by descending publication date.\n            If `state=all` the number of items returned will be `1000` instead of the default `30`.\n            This parameter can be used in conjuction with `state`."
								},
								{
									"key": "state",
									"value": "fresh",
									"description": "Using this parameter will allow the client to check which articles are fresh or rising.\n            If `state=fresh` the server will return fresh articles.\n            If `state=rising` the server will return rising articles.\n            This param can be used in conjuction with `username`, only if set to `all`."
								},
								{
									"key": "top",
									"value": "<integer>",
									"description": "Using this parameter will allow the client to return the most popular articles\nin the last `N` days.\n`top` indicates the number of days since publication of the articles returned.\nThis param can be used in conjuction with `tag`."
								},
								{
									"key": "collection_id",
									"value": "<integer>",
									"description": "Adding this will allow the client to return the list of articles\nbelonging to the requested collection, ordered by ascending publication date."
								}
							]
						},
						"description": "This endpoint allows the client to retrieve a list of articles.\n\n\"Articles\" are all the posts that users create on DEV that typically\nshow up in the feed. They can be a blog post, a discussion question,\na help thread etc. but is referred to as article within the code.\n\nBy default it will return featured, published articles ordered\nby descending popularity.\n\nIt supports pagination, each page will contain `30` articles by default."
					},
					"response": [
						{
							"name": "A List of Articles",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "api-key",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/articles?page=1&per_page=30&tag=<string>&tags=<string>&tags_exclude=<string>&username=<string>&state=fresh&top=<integer>&collection_id=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"articles"
									],
									"query": [
										{
											"key": "page",
											"value": "1",
											"description": "Pagination page"
										},
										{
											"key": "per_page",
											"value": "30",
											"description": "Page size (the number of items to return per page). The default maximum value can be overridden by \"API_PER_PAGE_MAX\" environment variable."
										},
										{
											"key": "tag",
											"value": "<string>",
											"description": "Using this parameter will retrieve articles that contain the requested tag. Articles\nwill be ordered by descending popularity.This parameter can be used in conjuction with `top`."
										},
										{
											"key": "tags",
											"value": "<string>",
											"description": "Using this parameter will retrieve articles with any of the comma-separated tags.\nArticles will be ordered by descending popularity."
										},
										{
											"key": "tags_exclude",
											"value": "<string>",
											"description": "Using this parameter will retrieve articles that do _not_ contain _any_\nof comma-separated tags. Articles will be ordered by descending popularity."
										},
										{
											"key": "username",
											"value": "<string>",
											"description": "Using this parameter will retrieve articles belonging\n            to a User or Organization ordered by descending publication date.\n            If `state=all` the number of items returned will be `1000` instead of the default `30`.\n            This parameter can be used in conjuction with `state`."
										},
										{
											"key": "state",
											"value": "fresh",
											"description": "Using this parameter will allow the client to check which articles are fresh or rising.\n            If `state=fresh` the server will return fresh articles.\n            If `state=rising` the server will return rising articles.\n            This param can be used in conjuction with `username`, only if set to `all`."
										},
										{
											"key": "top",
											"value": "<integer>",
											"description": "Using this parameter will allow the client to return the most popular articles\nin the last `N` days.\n`top` indicates the number of days since publication of the articles returned.\nThis param can be used in conjuction with `tag`."
										},
										{
											"key": "collection_id",
											"value": "<integer>",
											"description": "Adding this will allow the client to return the list of articles\nbelonging to the requested collection, ordered by ascending publication date."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"type_of\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"title\": \"<string>\",\n    \"description\": \"<string>\",\n    \"cover_image\": \"<string>\",\n    \"readable_publish_date\": \"<string>\",\n    \"social_image\": \"<string>\",\n    \"tag_list\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"tags\": \"<string>\",\n    \"slug\": \"<string>\",\n    \"path\": \"<string>\",\n    \"url\": \"<string>\",\n    \"canonical_url\": \"<string>\",\n    \"positive_reactions_count\": \"<integer>\",\n    \"public_reactions_count\": \"<integer>\",\n    \"created_at\": \"<dateTime>\",\n    \"edited_at\": \"<dateTime>\",\n    \"crossposted_at\": \"<dateTime>\",\n    \"published_at\": \"<dateTime>\",\n    \"last_comment_at\": \"<dateTime>\",\n    \"published_timestamp\": \"<dateTime>\",\n    \"user\": {\n      \"name\": \"<string>\",\n      \"username\": \"<string>\",\n      \"twitter_username\": \"<string>\",\n      \"github_username\": \"<string>\",\n      \"website_url\": \"<string>\",\n      \"profile_image\": \"<string>\",\n      \"profile_image_90\": \"<string>\"\n    },\n    \"reading_time_minutes\": \"<integer>\",\n    \"flare_tag\": {\n      \"name\": \"<string>\",\n      \"bg_color_hex\": \"<string>\",\n      \"text_color_hex\": \"<string>\"\n    },\n    \"organization\": {\n      \"name\": \"<string>\",\n      \"username\": \"<string>\",\n      \"slug\": \"<string>\",\n      \"profile_image\": \"<string>\",\n      \"profile_image_90\": \"<string>\"\n    }\n  },\n  {\n    \"type_of\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"title\": \"<string>\",\n    \"description\": \"<string>\",\n    \"cover_image\": \"<string>\",\n    \"readable_publish_date\": \"<string>\",\n    \"social_image\": \"<string>\",\n    \"tag_list\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"tags\": \"<string>\",\n    \"slug\": \"<string>\",\n    \"path\": \"<string>\",\n    \"url\": \"<string>\",\n    \"canonical_url\": \"<string>\",\n    \"positive_reactions_count\": \"<integer>\",\n    \"public_reactions_count\": \"<integer>\",\n    \"created_at\": \"<dateTime>\",\n    \"edited_at\": \"<dateTime>\",\n    \"crossposted_at\": \"<dateTime>\",\n    \"published_at\": \"<dateTime>\",\n    \"last_comment_at\": \"<dateTime>\",\n    \"published_timestamp\": \"<dateTime>\",\n    \"user\": {\n      \"name\": \"<string>\",\n      \"username\": \"<string>\",\n      \"twitter_username\": \"<string>\",\n      \"github_username\": \"<string>\",\n      \"website_url\": \"<string>\",\n      \"profile_image\": \"<string>\",\n      \"profile_image_90\": \"<string>\"\n    },\n    \"reading_time_minutes\": \"<integer>\",\n    \"flare_tag\": {\n      \"name\": \"<string>\",\n      \"bg_color_hex\": \"<string>\",\n      \"text_color_hex\": \"<string>\"\n    },\n    \"organization\": {\n      \"name\": \"<string>\",\n      \"username\": \"<string>\",\n      \"slug\": \"<string>\",\n      \"profile_image\": \"<string>\",\n      \"profile_image_90\": \"<string>\"\n    }\n  }\n]"
						}
					]
				}
			]
		},
		{
			"name": "comments",
			"item": [
				{
					"name": "{id}",
					"item": [
						{
							"name": "Comment by id",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/comments/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"comments",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<integer>",
											"description": "(Required) Comment identifier."
										}
									]
								},
								"description": "This endpoint allows the client to retrieve a comment as well as his descendants comments.\n\n  It will return the required comment (the root) with its nested descendants as a thread.\n\n  See the format specification for further details."
							},
							"response": [
								{
									"name": "A List of the Comments",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "api-key",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/comments/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"comments",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"example\": {\n    \"type_of\": \"comment\",\n    \"id_code\": \"54\",\n    \"created_at\": \"2023-04-14T14:45:35Z\",\n    \"body_html\": \"<p>Ramps tacos jean shorts humblebrag street bicycle rights paleo. Actually green juice chartreuse tattooed cliche. 8-bit bushwick diy aesthetic.</p>\\n\\n\",\n    \"user\": {\n      \"name\": \"Santos \\\"Broderick\\\" \\\\:/ Lemke\",\n      \"username\": \"username414\",\n      \"twitter_username\": \"twitter414\",\n      \"github_username\": \"github414\",\n      \"user_id\": 1339,\n      \"profile_image\": \"/uploads/user/profile_image/1339/08f5cd26-743e-4957-af23-540b7ded60d6.jpeg\",\n      \"profile_image_90\": \"/uploads/user/profile_image/1339/08f5cd26-743e-4957-af23-540b7ded60d6.jpeg\"\n    },\n    \"children\": []\n  }\n}"
								},
								{
									"name": "Comment Not Found",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "api-key",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/comments/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"comments",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"example\": {\n    \"error\": \"not found\",\n    \"status\": 404\n  }\n}"
								}
							]
						}
					]
				},
				{
					"name": "Comments",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/comments?a_id=<string>&p_id=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments"
							],
							"query": [
								{
									"key": "a_id",
									"value": "<string>",
									"description": "Article identifier."
								},
								{
									"key": "p_id",
									"value": "<string>",
									"description": "Podcast Episode identifier."
								}
							]
						},
						"description": "This endpoint allows the client to retrieve all comments belonging to an article or podcast episode as threaded conversations.\n\nIt will return the all top level comments with their nested comments as threads. See the format specification for further details."
					},
					"response": [
						{
							"name": "A List of Comments",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "api-key",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/comments?a_id=<string>&p_id=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"comments"
									],
									"query": [
										{
											"key": "a_id",
											"value": "<string>",
											"description": "Article identifier."
										},
										{
											"key": "p_id",
											"value": "<string>",
											"description": "Podcast Episode identifier."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"type_of\": \"<string>\",\n    \"id_code\": \"<string>\",\n    \"created_at\": \"<dateTime>\",\n    \"image_url\": \"<string>\"\n  },\n  {\n    \"type_of\": \"<string>\",\n    \"id_code\": \"<string>\",\n    \"created_at\": \"<dateTime>\",\n    \"image_url\": \"<string>\"\n  }\n]"
						},
						{
							"name": "Resource Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "api-key",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/comments?a_id=<string>&p_id=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"comments"
									],
									"query": [
										{
											"key": "a_id",
											"value": "<string>",
											"description": "Article identifier."
										},
										{
											"key": "p_id",
											"value": "<string>",
											"description": "Podcast Episode identifier."
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"example\": {\n    \"error\": \"not found\",\n    \"status\": 404\n  }\n}"
						}
					]
				}
			]
		},
		{
			"name": "display_ads",
			"item": [
				{
					"name": "{id}",
					"item": [
						{
							"name": "unpublish",
							"item": [
								{
									"name": "unpublish",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/display_ads/:id/unpublish",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"display_ads",
												":id",
												"unpublish"
											],
											"variable": [
												{
													"key": "id",
													"value": "<integer>",
													"description": "(Required) The ID of the display ad to unpublish."
												}
											]
										},
										"description": "This endpoint allows the client to remove a display ad from rotation by un-publishing it."
									},
									"response": [
										{
											"name": "no content",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "api-key",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/display_ads/:id/unpublish",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"display_ads",
														":id",
														"unpublish"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										},
										{
											"name": "unauthorized",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "api-key",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/display_ads/:id/unpublish",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"display_ads",
														":id",
														"unpublish"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"example\": {\n    \"error\": \"unauthorized\",\n    \"status\": 401\n  }\n}"
										},
										{
											"name": "not found",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "api-key",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/display_ads/:id/unpublish",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"display_ads",
														":id",
														"unpublish"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"example\": {\n    \"error\": \"not found\",\n    \"status\": 404\n  }\n}"
										}
									]
								}
							]
						},
						{
							"name": "display ad",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/display_ads/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"display_ads",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<integer>",
											"description": "(Required) The ID of the display ad."
										}
									]
								},
								"description": "This endpoint allows the client to retrieve a single display ad, via its id."
							},
							"response": [
								{
									"name": "successful",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "api-key",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/display_ads/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"display_ads",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"example\": {\n    \"id\": 196,\n    \"approved\": false,\n    \"body_markdown\": \"Hello _hey_ Hey hey 9\",\n    \"cached_tag_list\": \"\",\n    \"clicks_count\": 0,\n    \"created_at\": \"2023-04-14T18:45:35.813+04:00\",\n    \"display_to\": \"all\",\n    \"exclude_article_ids\": \"\",\n    \"impressions_count\": 0,\n    \"name\": \"Display Ad 196\",\n    \"organization_id\": 304,\n    \"placement_area\": \"sidebar_left\",\n    \"processed_html\": \"<p>Hello <em>hey</em> Hey hey 9</p>\",\n    \"published\": false,\n    \"success_rate\": 0,\n    \"type_of\": \"in_house\",\n    \"updated_at\": \"2023-04-14T18:45:35.817+04:00\",\n    \"tag_list\": \"\"\n  }\n}"
								},
								{
									"name": "unauthorized",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "api-key",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/display_ads/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"display_ads",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"example\": {\n    \"error\": \"unauthorized\",\n    \"status\": 401\n  }\n}"
								},
								{
									"name": "Unknown DisplayAd ID",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "api-key",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/display_ads/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"display_ads",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"example\": {\n    \"error\": \"not found\",\n    \"status\": 404\n  }\n}"
								}
							]
						},
						{
							"name": "display ads",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/display_ads/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"display_ads",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<integer>",
											"description": "(Required) The ID of the display ad."
										}
									]
								},
								"description": "This endpoint allows the client to update the attributes of a single display ad, via its id."
							},
							"response": [
								{
									"name": "successful",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "api-key",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/display_ads/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"display_ads",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{}"
								},
								{
									"name": "unauthorized",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "api-key",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/display_ads/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"display_ads",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"example\": {\n    \"error\": \"unauthorized\",\n    \"status\": 401\n  }\n}"
								},
								{
									"name": "not found",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "api-key",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/display_ads/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"display_ads",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"example\": {\n    \"error\": \"not found\",\n    \"status\": 404\n  }\n}"
								}
							]
						}
					]
				},
				{
					"name": "display ads",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/display_ads",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"display_ads"
							]
						},
						"description": "This endpoint allows the client to retrieve a list of all display ads."
					},
					"response": [
						{
							"name": "successful",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "api-key",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/display_ads",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"display_ads"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"name\": \"<string>\",\n    \"body_markdown\": \"<string>\",\n    \"placement_area\": \"post_sidebar\",\n    \"id\": \"<integer>\",\n    \"approved\": \"<boolean>\",\n    \"published\": \"<boolean>\",\n    \"organization_id\": \"<integer>\",\n    \"creator_id\": \"<integer>\",\n    \"tag_list\": \"<string>\",\n    \"article_exclude_ids\": \"<string>\",\n    \"audience_segment_type\": \"experience2\",\n    \"display_to\": \"all\",\n    \"type_of\": \"in_house\"\n  },\n  {\n    \"name\": \"<string>\",\n    \"body_markdown\": \"<string>\",\n    \"placement_area\": \"sidebar_left\",\n    \"id\": \"<integer>\",\n    \"approved\": \"<boolean>\",\n    \"published\": \"<boolean>\",\n    \"organization_id\": \"<integer>\",\n    \"creator_id\": \"<integer>\",\n    \"tag_list\": \"<string>\",\n    \"article_exclude_ids\": \"<string>\",\n    \"audience_segment_type\": \"experience2\",\n    \"display_to\": \"all\",\n    \"type_of\": \"in_house\"\n  }\n]"
						},
						{
							"name": "unauthorized",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "api-key",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/display_ads",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"display_ads"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"example\": {\n    \"error\": \"unauthorized\",\n    \"status\": 401\n  }\n}"
						}
					]
				},
				{
					"name": "display ads",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/display_ads",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"display_ads"
							]
						},
						"description": "This endpoint allows the client to create a new display ad."
					},
					"response": [
						{
							"name": "successful",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "api-key",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/display_ads",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"display_ads"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{}"
						},
						{
							"name": "unauthorized",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "api-key",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/display_ads",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"display_ads"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"example\": {\n    \"error\": \"unauthorized\",\n    \"status\": 401\n  }\n}"
						},
						{
							"name": "unprocessable",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "api-key",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/display_ads",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"display_ads"
									]
								}
							},
							"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
							"code": 422,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"example\": {\n    \"approved\": true,\n    \"body_markdown\": \"# Hi, this is ad\\nYep, it's an ad\",\n    \"clicks_count\": 0,\n    \"display_to\": \"all\",\n    \"exclude_article_ids\": \"\",\n    \"impressions_count\": 0,\n    \"name\": \"Example Ad\",\n    \"placement_area\": \"moon\",\n    \"published\": true,\n    \"success_rate\": 0,\n    \"type_of\": \"in_house\"\n  }\n}"
						}
					]
				}
			]
		},
		{
			"name": "follows",
			"item": [
				{
					"name": "tags",
					"item": [
						{
							"name": "Followed Tags",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/follows/tags",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"follows",
										"tags"
									]
								},
								"description": "This endpoint allows the client to retrieve a list of the tags they follow."
							},
							"response": [
								{
									"name": "A List of followed tags",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "api-key",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/follows/tags",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"follows",
												"tags"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"id\": \"<long>\",\n    \"name\": \"<string>\",\n    \"points\": \"<float>\"\n  },\n  {\n    \"id\": \"<long>\",\n    \"name\": \"<string>\",\n    \"points\": \"<float>\"\n  }\n]"
								},
								{
									"name": "unauthorized",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "api-key",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/follows/tags",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"follows",
												"tags"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"example\": {\n    \"error\": \"unauthorized\",\n    \"status\": 401\n  }\n}"
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "followers",
			"item": [
				{
					"name": "users",
					"item": [
						{
							"name": "Followers",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/followers/users?page=1&per_page=30&sort=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"followers",
										"users"
									],
									"query": [
										{
											"key": "page",
											"value": "1",
											"description": "Pagination page"
										},
										{
											"key": "per_page",
											"value": "30",
											"description": "Page size (the number of items to return per page). The default maximum value can be overridden by \"API_PER_PAGE_MAX\" environment variable."
										},
										{
											"key": "sort",
											"value": "<string>",
											"description": "Default is 'created_at'. Specifies the sort order for the created_at param of the follow\n                                relationship. To sort by newest followers first (descending order) specify\n                                ?sort=-created_at."
										}
									]
								},
								"description": "This endpoint allows the client to retrieve a list of the followers they have.\n        \"Followers\" are users that are following other users on the website.\n        It supports pagination, each page will contain 80 followers by default."
							},
							"response": [
								{
									"name": "A List of followers",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "api-key",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/followers/users?page=1&per_page=30&sort=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"followers",
												"users"
											],
											"query": [
												{
													"key": "page",
													"value": "1",
													"description": "Pagination page"
												},
												{
													"key": "per_page",
													"value": "30",
													"description": "Page size (the number of items to return per page). The default maximum value can be overridden by \"API_PER_PAGE_MAX\" environment variable."
												},
												{
													"key": "sort",
													"value": "<string>",
													"description": "Default is 'created_at'. Specifies the sort order for the created_at param of the follow\n                                relationship. To sort by newest followers first (descending order) specify\n                                ?sort=-created_at."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"type_of\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"user_id\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"path\": \"<string>\",\n    \"profile_image\": \"<string>\"\n  },\n  {\n    \"type_of\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"user_id\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"path\": \"<string>\",\n    \"profile_image\": \"<string>\"\n  }\n]"
								},
								{
									"name": "unauthorized",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "api-key",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/followers/users?page=1&per_page=30&sort=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"followers",
												"users"
											],
											"query": [
												{
													"key": "page",
													"value": "1",
													"description": "Pagination page"
												},
												{
													"key": "per_page",
													"value": "30",
													"description": "Page size (the number of items to return per page). The default maximum value can be overridden by \"API_PER_PAGE_MAX\" environment variable."
												},
												{
													"key": "sort",
													"value": "<string>",
													"description": "Default is 'created_at'. Specifies the sort order for the created_at param of the follow\n                                relationship. To sort by newest followers first (descending order) specify\n                                ?sort=-created_at."
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"example\": {\n    \"error\": \"unauthorized\",\n    \"status\": 401\n  }\n}"
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "organizations",
			"item": [
				{
					"name": "{username}",
					"item": [
						{
							"name": "users",
							"item": [
								{
									"name": "Organization's users",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/organizations/:username/users?page=1&per_page=30",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organizations",
												":username",
												"users"
											],
											"query": [
												{
													"key": "page",
													"value": "1",
													"description": "Pagination page"
												},
												{
													"key": "per_page",
													"value": "30",
													"description": "Page size (the number of items to return per page). The default maximum value can be overridden by \"API_PER_PAGE_MAX\" environment variable."
												}
											],
											"variable": [
												{
													"key": "username",
													"value": "<string>",
													"description": "(Required) "
												}
											]
										},
										"description": "This endpoint allows the client to retrieve a list of users belonging to the organization\n\nIt supports pagination, each page will contain `30` users by default."
									},
									"response": [
										{
											"name": "An Organization's users",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "api-key",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/organizations/:username/users?page=1&per_page=30",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organizations",
														":username",
														"users"
													],
													"query": [
														{
															"key": "page",
															"value": "1",
															"description": "Pagination page"
														},
														{
															"key": "per_page",
															"value": "30",
															"description": "Page size (the number of items to return per page). The default maximum value can be overridden by \"API_PER_PAGE_MAX\" environment variable."
														}
													],
													"variable": [
														{
															"key": "username"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"type_of\": \"<string>\",\n    \"id\": \"<long>\",\n    \"username\": \"<string>\",\n    \"name\": \"<string>\",\n    \"summary\": \"<string>\",\n    \"twitter_username\": \"<string>\",\n    \"github_username\": \"<string>\",\n    \"website_url\": \"<string>\",\n    \"location\": \"<string>\",\n    \"joined_at\": \"<string>\",\n    \"profile_image\": \"<string>\"\n  },\n  {\n    \"type_of\": \"<string>\",\n    \"id\": \"<long>\",\n    \"username\": \"<string>\",\n    \"name\": \"<string>\",\n    \"summary\": \"<string>\",\n    \"twitter_username\": \"<string>\",\n    \"github_username\": \"<string>\",\n    \"website_url\": \"<string>\",\n    \"location\": \"<string>\",\n    \"joined_at\": \"<string>\",\n    \"profile_image\": \"<string>\"\n  }\n]"
										},
										{
											"name": "Not Found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "api-key",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/organizations/:username/users?page=1&per_page=30",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organizations",
														":username",
														"users"
													],
													"query": [
														{
															"key": "page",
															"value": "1",
															"description": "Pagination page"
														},
														{
															"key": "per_page",
															"value": "30",
															"description": "Page size (the number of items to return per page). The default maximum value can be overridden by \"API_PER_PAGE_MAX\" environment variable."
														}
													],
													"variable": [
														{
															"key": "username"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"example\": {\n    \"error\": \"not found\",\n    \"status\": 404\n  }\n}"
										}
									]
								}
							]
						},
						{
							"name": "articles",
							"item": [
								{
									"name": "Organization's Articles",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/organizations/:username/articles?page=1&per_page=30",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organizations",
												":username",
												"articles"
											],
											"query": [
												{
													"key": "page",
													"value": "1",
													"description": "Pagination page"
												},
												{
													"key": "per_page",
													"value": "30",
													"description": "Page size (the number of items to return per page). The default maximum value can be overridden by \"API_PER_PAGE_MAX\" environment variable."
												}
											],
											"variable": [
												{
													"key": "username",
													"value": "<string>",
													"description": "(Required) "
												}
											]
										},
										"description": "This endpoint allows the client to retrieve a list of Articles belonging to the organization\n\nIt supports pagination, each page will contain `30` users by default."
									},
									"response": [
										{
											"name": "An Organization's Articles",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "api-key",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/organizations/:username/articles?page=1&per_page=30",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organizations",
														":username",
														"articles"
													],
													"query": [
														{
															"key": "page",
															"value": "1",
															"description": "Pagination page"
														},
														{
															"key": "per_page",
															"value": "30",
															"description": "Page size (the number of items to return per page). The default maximum value can be overridden by \"API_PER_PAGE_MAX\" environment variable."
														}
													],
													"variable": [
														{
															"key": "username"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"type_of\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"title\": \"<string>\",\n    \"description\": \"<string>\",\n    \"cover_image\": \"<string>\",\n    \"readable_publish_date\": \"<string>\",\n    \"social_image\": \"<string>\",\n    \"tag_list\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"tags\": \"<string>\",\n    \"slug\": \"<string>\",\n    \"path\": \"<string>\",\n    \"url\": \"<string>\",\n    \"canonical_url\": \"<string>\",\n    \"positive_reactions_count\": \"<integer>\",\n    \"public_reactions_count\": \"<integer>\",\n    \"created_at\": \"<dateTime>\",\n    \"edited_at\": \"<dateTime>\",\n    \"crossposted_at\": \"<dateTime>\",\n    \"published_at\": \"<dateTime>\",\n    \"last_comment_at\": \"<dateTime>\",\n    \"published_timestamp\": \"<dateTime>\",\n    \"user\": {\n      \"name\": \"<string>\",\n      \"username\": \"<string>\",\n      \"twitter_username\": \"<string>\",\n      \"github_username\": \"<string>\",\n      \"website_url\": \"<string>\",\n      \"profile_image\": \"<string>\",\n      \"profile_image_90\": \"<string>\"\n    },\n    \"reading_time_minutes\": \"<integer>\",\n    \"flare_tag\": {\n      \"name\": \"<string>\",\n      \"bg_color_hex\": \"<string>\",\n      \"text_color_hex\": \"<string>\"\n    },\n    \"organization\": {\n      \"name\": \"<string>\",\n      \"username\": \"<string>\",\n      \"slug\": \"<string>\",\n      \"profile_image\": \"<string>\",\n      \"profile_image_90\": \"<string>\"\n    }\n  },\n  {\n    \"type_of\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"title\": \"<string>\",\n    \"description\": \"<string>\",\n    \"cover_image\": \"<string>\",\n    \"readable_publish_date\": \"<string>\",\n    \"social_image\": \"<string>\",\n    \"tag_list\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"tags\": \"<string>\",\n    \"slug\": \"<string>\",\n    \"path\": \"<string>\",\n    \"url\": \"<string>\",\n    \"canonical_url\": \"<string>\",\n    \"positive_reactions_count\": \"<integer>\",\n    \"public_reactions_count\": \"<integer>\",\n    \"created_at\": \"<dateTime>\",\n    \"edited_at\": \"<dateTime>\",\n    \"crossposted_at\": \"<dateTime>\",\n    \"published_at\": \"<dateTime>\",\n    \"last_comment_at\": \"<dateTime>\",\n    \"published_timestamp\": \"<dateTime>\",\n    \"user\": {\n      \"name\": \"<string>\",\n      \"username\": \"<string>\",\n      \"twitter_username\": \"<string>\",\n      \"github_username\": \"<string>\",\n      \"website_url\": \"<string>\",\n      \"profile_image\": \"<string>\",\n      \"profile_image_90\": \"<string>\"\n    },\n    \"reading_time_minutes\": \"<integer>\",\n    \"flare_tag\": {\n      \"name\": \"<string>\",\n      \"bg_color_hex\": \"<string>\",\n      \"text_color_hex\": \"<string>\"\n    },\n    \"organization\": {\n      \"name\": \"<string>\",\n      \"username\": \"<string>\",\n      \"slug\": \"<string>\",\n      \"profile_image\": \"<string>\",\n      \"profile_image_90\": \"<string>\"\n    }\n  }\n]"
										},
										{
											"name": "Not Found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "api-key",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/organizations/:username/articles?page=1&per_page=30",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"organizations",
														":username",
														"articles"
													],
													"query": [
														{
															"key": "page",
															"value": "1",
															"description": "Pagination page"
														},
														{
															"key": "per_page",
															"value": "30",
															"description": "Page size (the number of items to return per page). The default maximum value can be overridden by \"API_PER_PAGE_MAX\" environment variable."
														}
													],
													"variable": [
														{
															"key": "username"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"example\": {\n    \"error\": \"not found\",\n    \"status\": 404\n  }\n}"
										}
									]
								}
							]
						},
						{
							"name": "An organization",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/organizations/:username",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"organizations",
										":username"
									],
									"variable": [
										{
											"key": "username",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								},
								"description": "This endpoint allows the client to retrieve a single organization by their username"
							},
							"response": [
								{
									"name": "An Organization",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "api-key",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/organizations/:username",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organizations",
												":username"
											],
											"variable": [
												{
													"key": "username"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{}"
								},
								{
									"name": "Not Found",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "api-key",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/organizations/:username",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organizations",
												":username"
											],
											"variable": [
												{
													"key": "username"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"example\": {\n    \"error\": \"not found\",\n    \"status\": 404\n  }\n}"
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "pages",
			"item": [
				{
					"name": "{id}",
					"item": [
						{
							"name": "show details for a page",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/pages/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pages",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<integer>",
											"description": "(Required) The ID of the page."
										}
									]
								},
								"description": "This endpoint allows the client to retrieve details for a single Page object, specified by ID."
							},
							"response": [
								{
									"name": "successful",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "api-key",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/pages/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pages",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"title\": \"<string>\",\n  \"slug\": \"<string>\",\n  \"description\": \"<string>\",\n  \"template\": \"contained\",\n  \"body_markdown\": \"<string>\",\n  \"body_json\": \"<string>\",\n  \"is_top_level_path\": \"<boolean>\",\n  \"social_image\": {}\n}"
								}
							]
						},
						{
							"name": "update details for a page",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"title\": \"<string>\",\n  \"slug\": \"<string>\",\n  \"description\": \"<string>\",\n  \"template\": \"contained\",\n  \"body_markdown\": \"<string>\",\n  \"body_json\": \"<string>\",\n  \"is_top_level_path\": \"<boolean>\",\n  \"social_image\": {}\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/pages/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pages",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<integer>",
											"description": "(Required) The ID of the page."
										}
									]
								},
								"description": "This endpoint allows the client to retrieve details for a single Page object, specified by ID."
							},
							"response": [
								{
									"name": "successful",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "api-key",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"title\": \"<string>\",\n  \"slug\": \"<string>\",\n  \"description\": \"<string>\",\n  \"template\": \"contained\",\n  \"body_markdown\": \"<string>\",\n  \"body_json\": \"<string>\",\n  \"is_top_level_path\": \"<boolean>\",\n  \"social_image\": {}\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/pages/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pages",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"title\": \"<string>\",\n  \"slug\": \"<string>\",\n  \"description\": \"<string>\",\n  \"template\": \"contained\",\n  \"body_markdown\": \"<string>\",\n  \"body_json\": \"<string>\",\n  \"is_top_level_path\": \"<boolean>\",\n  \"social_image\": {}\n}"
								},
								{
									"name": "unauthorized",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "api-key",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"title\": \"<string>\",\n  \"slug\": \"<string>\",\n  \"description\": \"<string>\",\n  \"template\": \"contained\",\n  \"body_markdown\": \"<string>\",\n  \"body_json\": \"<string>\",\n  \"is_top_level_path\": \"<boolean>\",\n  \"social_image\": {}\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/pages/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pages",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"example\": {\n    \"error\": \"unauthorized\",\n    \"status\": 401\n  }\n}"
								},
								{
									"name": "unprocessable",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "api-key",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"title\": \"<string>\",\n  \"slug\": \"<string>\",\n  \"description\": \"<string>\",\n  \"template\": \"contained\",\n  \"body_markdown\": \"<string>\",\n  \"body_json\": \"<string>\",\n  \"is_top_level_path\": \"<boolean>\",\n  \"social_image\": {}\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/pages/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pages",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"example\": {\n    \"id\": 13,\n    \"title\": \"Little Hands Clapping\",\n    \"slug\": \"horizon_nursery\",\n    \"description\": \"Vel tenetur aspernatur mollitia.\",\n    \"is_top_level_path\": false,\n    \"landing_page\": false,\n    \"body_markdown\": \"Omnis quia eaque aliquam.\",\n    \"processed_html\": \"<p>Consequatur sit illum voluptas.</p>\\n\\n\",\n    \"social_image\": {},\n    \"template\": \"moon\"\n  }\n}"
								}
							]
						},
						{
							"name": "remove a page",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/pages/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pages",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<integer>",
											"description": "(Required) The ID of the page."
										}
									]
								},
								"description": "This endpoint allows the client to delete a single Page object, specified by ID."
							},
							"response": [
								{
									"name": "successful",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "api-key",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/pages/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pages",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"title\": \"<string>\",\n  \"slug\": \"<string>\",\n  \"description\": \"<string>\",\n  \"template\": \"contained\",\n  \"body_markdown\": \"<string>\",\n  \"body_json\": \"<string>\",\n  \"is_top_level_path\": \"<boolean>\",\n  \"social_image\": {}\n}"
								},
								{
									"name": "unauthorized",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "api-key",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/pages/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pages",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"example\": {\n    \"error\": \"unauthorized\",\n    \"status\": 401\n  }\n}"
								},
								{
									"name": "unprocessable",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "api-key",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/pages/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pages",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"example\": {\n    \"doubled_module\": {\n      \"const_name\": \"Page\",\n      \"object\": \"Page\"\n    },\n    \"__expired\": false\n  }\n}"
								}
							]
						}
					]
				},
				{
					"name": "show details for all pages",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/pages",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pages"
							]
						},
						"description": "This endpoint allows the client to retrieve details for all Page objects."
					},
					"response": [
						{
							"name": "successful",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "api-key",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/pages",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pages"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"title\": \"<string>\",\n    \"slug\": \"<string>\",\n    \"description\": \"<string>\",\n    \"template\": \"contained\",\n    \"body_markdown\": \"<string>\",\n    \"body_json\": \"<string>\",\n    \"is_top_level_path\": \"<boolean>\",\n    \"social_image\": {}\n  },\n  {\n    \"title\": \"<string>\",\n    \"slug\": \"<string>\",\n    \"description\": \"<string>\",\n    \"template\": \"contained\",\n    \"body_markdown\": \"<string>\",\n    \"body_json\": \"<string>\",\n    \"is_top_level_path\": \"<boolean>\",\n    \"social_image\": {}\n  }\n]"
						}
					]
				},
				{
					"name": "pages",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"<string>\",\n  \"slug\": \"<string>\",\n  \"description\": \"<string>\",\n  \"body_markdown\": \"<string>\",\n  \"body_json\": \"<string>\",\n  \"is_top_level_path\": \"<boolean>\",\n  \"template\": \"contained\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/pages",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pages"
							]
						},
						"description": "This endpoint allows the client to create a new page."
					},
					"response": [
						{
							"name": "successful",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "api-key",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"title\": \"<string>\",\n  \"slug\": \"<string>\",\n  \"description\": \"<string>\",\n  \"body_markdown\": \"<string>\",\n  \"body_json\": \"<string>\",\n  \"is_top_level_path\": \"<boolean>\",\n  \"template\": \"contained\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/pages",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pages"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"example\": {\n    \"id\": 7,\n    \"title\": \"Example Page\",\n    \"slug\": \"example1\",\n    \"description\": \"a new page\",\n    \"is_top_level_path\": false,\n    \"landing_page\": false,\n    \"body_markdown\": \"# Hi, this is a New Page\\nYep, it's an a new page\",\n    \"processed_html\": \"<h1>\\n  <a name=\\\"hi-this-is-a-new-page\\\" href=\\\"#hi-this-is-a-new-page\\\">\\n  </a>\\n  Hi, this is a New Page\\n</h1>\\n\\n<p>Yep, it's an a new page</p>\\n\\n\",\n    \"social_image\": {},\n    \"template\": \"contained\"\n  }\n}"
						},
						{
							"name": "unauthorized",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "api-key",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"title\": \"<string>\",\n  \"slug\": \"<string>\",\n  \"description\": \"<string>\",\n  \"body_markdown\": \"<string>\",\n  \"body_json\": \"<string>\",\n  \"is_top_level_path\": \"<boolean>\",\n  \"template\": \"contained\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/pages",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pages"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"example\": {\n    \"error\": \"unauthorized\",\n    \"status\": 401\n  }\n}"
						},
						{
							"name": "unprocessable",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "api-key",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"title\": \"<string>\",\n  \"slug\": \"<string>\",\n  \"description\": \"<string>\",\n  \"body_markdown\": \"<string>\",\n  \"body_json\": \"<string>\",\n  \"is_top_level_path\": \"<boolean>\",\n  \"template\": \"contained\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/pages",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pages"
									]
								}
							},
							"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
							"code": 422,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"example\": {\n    \"title\": \"Example Page\",\n    \"slug\": \"example1\",\n    \"description\": \"a new page\",\n    \"is_top_level_path\": false,\n    \"landing_page\": false,\n    \"body_markdown\": \"# Hi, this is a New Page\\nYep, it's an a new page\",\n    \"social_image\": {},\n    \"template\": \"moon\"\n  }\n}"
						}
					]
				}
			]
		},
		{
			"name": "podcast_episodes",
			"item": [
				{
					"name": "Podcast Episodes",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/podcast_episodes?page=1&per_page=30&username=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"podcast_episodes"
							],
							"query": [
								{
									"key": "page",
									"value": "1",
									"description": "Pagination page"
								},
								{
									"key": "per_page",
									"value": "30",
									"description": "Page size (the number of items to return per page). The default maximum value can be overridden by \"API_PER_PAGE_MAX\" environment variable."
								},
								{
									"key": "username",
									"value": "<string>",
									"description": "Using this parameter will retrieve episodes belonging to a specific podcast."
								}
							]
						},
						"description": "This endpoint allows the client to retrieve a list of podcast episodes.\n        \"Podcast episodes\" are episodes belonging to podcasts.\n        It will only return active (reachable) podcast episodes that belong to published podcasts available on the platform, ordered by descending publication date.\n        It supports pagination, each page will contain 30 articles by default."
					},
					"response": [
						{
							"name": "A List of Podcast episodes filtered by username",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "api-key",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/podcast_episodes?page=1&per_page=30&username=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"podcast_episodes"
									],
									"query": [
										{
											"key": "page",
											"value": "1",
											"description": "Pagination page"
										},
										{
											"key": "per_page",
											"value": "30",
											"description": "Page size (the number of items to return per page). The default maximum value can be overridden by \"API_PER_PAGE_MAX\" environment variable."
										},
										{
											"key": "username",
											"value": "<string>",
											"description": "Using this parameter will retrieve episodes belonging to a specific podcast."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"type_of\": \"<string>\",\n    \"class_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"path\": \"<string>\",\n    \"title\": \"<string>\",\n    \"image_url\": \"<string>\",\n    \"podcast\": {\n      \"title\": \"<string>\",\n      \"slug\": \"<string>\",\n      \"image_url\": \"<string>\"\n    }\n  },\n  {\n    \"type_of\": \"<string>\",\n    \"class_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"path\": \"<string>\",\n    \"title\": \"<string>\",\n    \"image_url\": \"<string>\",\n    \"podcast\": {\n      \"title\": \"<string>\",\n      \"slug\": \"<string>\",\n      \"image_url\": \"<string>\"\n    }\n  }\n]"
						},
						{
							"name": "Unknown Podcast username",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "api-key",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/podcast_episodes?page=1&per_page=30&username=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"podcast_episodes"
									],
									"query": [
										{
											"key": "page",
											"value": "1",
											"description": "Pagination page"
										},
										{
											"key": "per_page",
											"value": "30",
											"description": "Page size (the number of items to return per page). The default maximum value can be overridden by \"API_PER_PAGE_MAX\" environment variable."
										},
										{
											"key": "username",
											"value": "<string>",
											"description": "Using this parameter will retrieve episodes belonging to a specific podcast."
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"example\": {\n    \"error\": \"not found\",\n    \"status\": 404\n  }\n}"
						}
					]
				}
			]
		},
		{
			"name": "profile_images",
			"item": [
				{
					"name": "{username}",
					"item": [
						{
							"name": "A Users or organizations profile image",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/profile_images/:username",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"profile_images",
										":username"
									],
									"variable": [
										{
											"key": "username",
											"value": "<string>",
											"description": "(Required) The parameter is the username of the user or the username of the organization."
										}
									]
								},
								"description": "This endpoint allows the client to retrieve a user or organization profile image information by its\n        corresponding username."
							},
							"response": [
								{
									"name": "An object containing profile image details",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "api-key",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/profile_images/:username",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"profile_images",
												":username"
											],
											"variable": [
												{
													"key": "username"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{}"
								},
								{
									"name": "Resource Not Found",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "api-key",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/profile_images/:username",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"profile_images",
												":username"
											],
											"variable": [
												{
													"key": "username"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"example\": {\n    \"error\": \"not found\",\n    \"status\": 404\n  }\n}"
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "reactions",
			"item": [
				{
					"name": "toggle",
					"item": [
						{
							"name": "toggle reaction",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/reactions/toggle?category=exploding_head&reactable_id=<integer>&reactable_type=User",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reactions",
										"toggle"
									],
									"query": [
										{
											"key": "category",
											"value": "exploding_head",
											"description": "(Required) "
										},
										{
											"key": "reactable_id",
											"value": "<integer>",
											"description": "(Required) "
										},
										{
											"key": "reactable_type",
											"value": "User",
											"description": "(Required) "
										}
									]
								},
								"description": "This endpoint allows the client to toggle the user's reaction to a specified reactable (eg, Article, Comment, or User). For examples:\n        * \"Like\"ing an Article will create a new \"like\" Reaction from the user for that Articles\n        * \"Like\"ing that Article a second time will remove the \"like\" from the user"
							},
							"response": [
								{
									"name": "successful",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "api-key",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/reactions/toggle?category=exploding_head&reactable_id=<integer>&reactable_type=User",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reactions",
												"toggle"
											],
											"query": [
												{
													"key": "category",
													"value": "exploding_head",
													"description": "(Required) "
												},
												{
													"key": "reactable_id",
													"value": "<integer>",
													"description": "(Required) "
												},
												{
													"key": "reactable_type",
													"value": "User",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"example\": {\n    \"result\": \"create\",\n    \"category\": \"like\",\n    \"id\": 13,\n    \"reactable_id\": 283,\n    \"reactable_type\": \"Article\"\n  }\n}"
								},
								{
									"name": "unauthorized",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "api-key",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/reactions/toggle?category=exploding_head&reactable_id=<integer>&reactable_type=User",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reactions",
												"toggle"
											],
											"query": [
												{
													"key": "category",
													"value": "exploding_head",
													"description": "(Required) "
												},
												{
													"key": "reactable_id",
													"value": "<integer>",
													"description": "(Required) "
												},
												{
													"key": "reactable_type",
													"value": "User",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"example\": {\n    \"error\": \"unauthorized\",\n    \"status\": 401\n  }\n}"
								}
							]
						}
					]
				},
				{
					"name": "create reaction",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/reactions?category=exploding_head&reactable_id=<integer>&reactable_type=User",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"reactions"
							],
							"query": [
								{
									"key": "category",
									"value": "exploding_head",
									"description": "(Required) "
								},
								{
									"key": "reactable_id",
									"value": "<integer>",
									"description": "(Required) "
								},
								{
									"key": "reactable_type",
									"value": "User",
									"description": "(Required) "
								}
							]
						},
						"description": "This endpoint allows the client to create a reaction to a specified reactable (eg, Article, Comment, or User). For examples:\n        * \"Like\"ing an Article will create a new \"like\" Reaction from the user for that Articles\n        * \"Like\"ing that Article a second time will return the previous \"like\""
					},
					"response": [
						{
							"name": "successful",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "api-key",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/reactions?category=exploding_head&reactable_id=<integer>&reactable_type=User",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reactions"
									],
									"query": [
										{
											"key": "category",
											"value": "exploding_head",
											"description": "(Required) "
										},
										{
											"key": "reactable_id",
											"value": "<integer>",
											"description": "(Required) "
										},
										{
											"key": "reactable_type",
											"value": "User",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"example\": {\n    \"result\": \"none\",\n    \"category\": \"like\",\n    \"id\": 15,\n    \"reactable_id\": 285,\n    \"reactable_type\": \"Article\"\n  }\n}"
						},
						{
							"name": "unauthorized",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "api-key",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/reactions?category=exploding_head&reactable_id=<integer>&reactable_type=User",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reactions"
									],
									"query": [
										{
											"key": "category",
											"value": "exploding_head",
											"description": "(Required) "
										},
										{
											"key": "reactable_id",
											"value": "<integer>",
											"description": "(Required) "
										},
										{
											"key": "reactable_type",
											"value": "User",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"example\": {\n    \"error\": \"unauthorized\",\n    \"status\": 401\n  }\n}"
						}
					]
				}
			]
		},
		{
			"name": "readinglist",
			"item": [
				{
					"name": "Readinglist",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/readinglist?page=1&per_page=30",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"readinglist"
							],
							"query": [
								{
									"key": "page",
									"value": "1",
									"description": "Pagination page"
								},
								{
									"key": "per_page",
									"value": "30",
									"description": "Page size (the number of items to return per page). The default maximum value can be overridden by \"API_PER_PAGE_MAX\" environment variable."
								}
							]
						},
						"description": "This endpoint allows the client to retrieve a list of articles that were saved to a Users readinglist.\n        It supports pagination, each page will contain `30` articles by default"
					},
					"response": [
						{
							"name": "A list of articles in the users readinglist",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "api-key",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/readinglist?page=1&per_page=30",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"readinglist"
									],
									"query": [
										{
											"key": "page",
											"value": "1",
											"description": "Pagination page"
										},
										{
											"key": "per_page",
											"value": "30",
											"description": "Page size (the number of items to return per page). The default maximum value can be overridden by \"API_PER_PAGE_MAX\" environment variable."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"type_of\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"title\": \"<string>\",\n    \"description\": \"<string>\",\n    \"cover_image\": \"<string>\",\n    \"readable_publish_date\": \"<string>\",\n    \"social_image\": \"<string>\",\n    \"tag_list\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"tags\": \"<string>\",\n    \"slug\": \"<string>\",\n    \"path\": \"<string>\",\n    \"url\": \"<string>\",\n    \"canonical_url\": \"<string>\",\n    \"positive_reactions_count\": \"<integer>\",\n    \"public_reactions_count\": \"<integer>\",\n    \"created_at\": \"<dateTime>\",\n    \"edited_at\": \"<dateTime>\",\n    \"crossposted_at\": \"<dateTime>\",\n    \"published_at\": \"<dateTime>\",\n    \"last_comment_at\": \"<dateTime>\",\n    \"published_timestamp\": \"<dateTime>\",\n    \"user\": {\n      \"name\": \"<string>\",\n      \"username\": \"<string>\",\n      \"twitter_username\": \"<string>\",\n      \"github_username\": \"<string>\",\n      \"website_url\": \"<string>\",\n      \"profile_image\": \"<string>\",\n      \"profile_image_90\": \"<string>\"\n    },\n    \"reading_time_minutes\": \"<integer>\",\n    \"flare_tag\": {\n      \"name\": \"<string>\",\n      \"bg_color_hex\": \"<string>\",\n      \"text_color_hex\": \"<string>\"\n    },\n    \"organization\": {\n      \"name\": \"<string>\",\n      \"username\": \"<string>\",\n      \"slug\": \"<string>\",\n      \"profile_image\": \"<string>\",\n      \"profile_image_90\": \"<string>\"\n    }\n  },\n  {\n    \"type_of\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"title\": \"<string>\",\n    \"description\": \"<string>\",\n    \"cover_image\": \"<string>\",\n    \"readable_publish_date\": \"<string>\",\n    \"social_image\": \"<string>\",\n    \"tag_list\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"tags\": \"<string>\",\n    \"slug\": \"<string>\",\n    \"path\": \"<string>\",\n    \"url\": \"<string>\",\n    \"canonical_url\": \"<string>\",\n    \"positive_reactions_count\": \"<integer>\",\n    \"public_reactions_count\": \"<integer>\",\n    \"created_at\": \"<dateTime>\",\n    \"edited_at\": \"<dateTime>\",\n    \"crossposted_at\": \"<dateTime>\",\n    \"published_at\": \"<dateTime>\",\n    \"last_comment_at\": \"<dateTime>\",\n    \"published_timestamp\": \"<dateTime>\",\n    \"user\": {\n      \"name\": \"<string>\",\n      \"username\": \"<string>\",\n      \"twitter_username\": \"<string>\",\n      \"github_username\": \"<string>\",\n      \"website_url\": \"<string>\",\n      \"profile_image\": \"<string>\",\n      \"profile_image_90\": \"<string>\"\n    },\n    \"reading_time_minutes\": \"<integer>\",\n    \"flare_tag\": {\n      \"name\": \"<string>\",\n      \"bg_color_hex\": \"<string>\",\n      \"text_color_hex\": \"<string>\"\n    },\n    \"organization\": {\n      \"name\": \"<string>\",\n      \"username\": \"<string>\",\n      \"slug\": \"<string>\",\n      \"profile_image\": \"<string>\",\n      \"profile_image_90\": \"<string>\"\n    }\n  }\n]"
						},
						{
							"name": "Unauthorized",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "api-key",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/readinglist?page=1&per_page=30",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"readinglist"
									],
									"query": [
										{
											"key": "page",
											"value": "1",
											"description": "Pagination page"
										},
										{
											"key": "per_page",
											"value": "30",
											"description": "Page size (the number of items to return per page). The default maximum value can be overridden by \"API_PER_PAGE_MAX\" environment variable."
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"example\": {\n    \"error\": \"unauthorized\",\n    \"status\": 401\n  }\n}"
						}
					]
				}
			]
		},
		{
			"name": "tags",
			"item": [
				{
					"name": "Tags",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/tags?page=1&per_page=10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tags"
							],
							"query": [
								{
									"key": "page",
									"value": "1",
									"description": "Pagination page"
								},
								{
									"key": "per_page",
									"value": "10",
									"description": "Page size (the number of items to return per page). The default maximum value can be overridden by \"API_PER_PAGE_MAX\" environment variable."
								}
							]
						},
						"description": "This endpoint allows the client to retrieve a list of tags that can be used to tag articles.\n\nIt will return tags ordered by popularity.\n\nIt supports pagination, each page will contain 10 tags by default."
					},
					"response": [
						{
							"name": "A List of all tags",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "api-key",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/tags?page=1&per_page=10",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tags"
									],
									"query": [
										{
											"key": "page",
											"value": "1",
											"description": "Pagination page"
										},
										{
											"key": "per_page",
											"value": "10",
											"description": "Page size (the number of items to return per page). The default maximum value can be overridden by \"API_PER_PAGE_MAX\" environment variable."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"id\": \"<long>\",\n    \"name\": \"<string>\",\n    \"bg_color_hex\": \"<string>\",\n    \"text_color_hex\": \"<string>\"\n  },\n  {\n    \"id\": \"<long>\",\n    \"name\": \"<string>\",\n    \"bg_color_hex\": \"<string>\",\n    \"text_color_hex\": \"<string>\"\n  }\n]"
						}
					]
				}
			]
		},
		{
			"name": "users",
			"item": [
				{
					"name": "me",
					"item": [
						{
							"name": "The authenticated user",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/me",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"me"
									]
								},
								"description": "This endpoint allows the client to retrieve information about the authenticated user"
							},
							"response": [
								{
									"name": "successful",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "api-key",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/me",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"me"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{}"
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "api-key",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/me",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"me"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"example\": {\n    \"error\": \"unauthorized\",\n    \"status\": 401\n  }\n}"
								}
							]
						}
					]
				},
				{
					"name": "{id}",
					"item": [
						{
							"name": "unpublish",
							"item": [
								{
									"name": "Unpublish a User's Articles and Comments",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:id/unpublish",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":id",
												"unpublish"
											],
											"variable": [
												{
													"key": "id",
													"value": "<integer>",
													"description": "(Required) The ID of the user to unpublish."
												}
											]
										},
										"description": "This endpoint allows the client to unpublish all of the articles and\ncomments created by a user.\n\nThe user associated with the API key must have any 'admin' or 'moderator' role.\n\nThis specified user's articles and comments will be unpublished and will no longer be\nvisible to the public. They will remain in the database and will set back to draft status\non the specified user's  dashboard. Any notifications associated with the specified user's\narticles and comments will be deleted.\n\nNote this endpoint unpublishes articles and comments asychronously: it will return a 204 NO CONTENT\nstatus code immediately, but the articles and comments will not be unpublished until the\nrequest is completed on the server."
									},
									"response": [
										{
											"name": "User's articles and comments successfully unpublished",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "api-key",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:id/unpublish",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":id",
														"unpublish"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Unauthorized",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "api-key",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:id/unpublish",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":id",
														"unpublish"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"example\": {\n    \"error\": \"unauthorized\",\n    \"status\": 401\n  }\n}"
										},
										{
											"name": "Unknown User ID (still accepted for async processing)",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "api-key",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:id/unpublish",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":id",
														"unpublish"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"example\": {\n    \"error\": \"not found\",\n    \"status\": 404\n  }\n}"
										}
									]
								}
							]
						},
						{
							"name": "suspend",
							"item": [
								{
									"name": "Suspend a User",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:id/suspend",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":id",
												"suspend"
											],
											"variable": [
												{
													"key": "id",
													"value": "<integer>",
													"description": "(Required) The ID of the user to suspend."
												}
											]
										},
										"description": "This endpoint allows the client to suspend a user.\n\nThe user associated with the API key must have any 'admin' or 'moderator' role.\n\nThis specified user will be assigned the 'suspended' role. Suspending a user will stop the\nuser from posting new posts and comments. It doesn't delete any of the user's content, just\nprevents them from creating new content while suspended. Users are not notified of their suspension\nin the UI, so if you want them to know about this, you must notify them."
									},
									"response": [
										{
											"name": "User successfully unpublished",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "api-key",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:id/suspend",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":id",
														"suspend"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Unauthorized",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "api-key",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:id/suspend",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":id",
														"suspend"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"example\": {\n    \"error\": \"unauthorized\",\n    \"status\": 401\n  }\n}"
										},
										{
											"name": "Unknown User ID",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "api-key",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:id/suspend",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":id",
														"suspend"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"example\": {\n    \"error\": \"not found\",\n    \"status\": 404\n  }\n}"
										}
									]
								}
							]
						},
						{
							"name": "A User",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								},
								"description": "This endpoint allows the client to retrieve a single user, either by id\nor by the user's username.\n\nFor complete documentation, see the v0 API docs: https://developers.forem.com/api/v0#tag/users/operation/getUser"
							},
							"response": [
								{
									"name": "successful",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "api-key",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{}"
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "admin",
			"item": [
				{
					"name": "users",
					"item": [
						{
							"name": "Invite a User",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"<string>\",\n  \"name\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/admin/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"users"
									]
								},
								"description": "This endpoint allows the client to trigger an invitation to the provided email address.\n\n        It requires a token from a user with `super_admin` privileges."
							},
							"response": [
								{
									"name": "Successful",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "api-key",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"<string>\",\n  \"name\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/admin/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"users"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "api-key",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"<string>\",\n  \"name\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/admin/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"users"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"example\": {\n    \"error\": \"unauthorized\",\n    \"status\": 401\n  }\n}"
								},
								{
									"name": "Unprocessable Entity",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "api-key",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"<string>\",\n  \"name\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/admin/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"users"
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"example\": {\n    \"error\": \"param is missing or the value is empty: email\",\n    \"status\": 422\n  }\n}"
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "videos",
			"item": [
				{
					"name": "Articles with a video",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/videos?page=1&per_page=24",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"videos"
							],
							"query": [
								{
									"key": "page",
									"value": "1",
									"description": "Pagination page"
								},
								{
									"key": "per_page",
									"value": "24",
									"description": "Page size (the number of items to return per page). The default maximum value can be overridden by \"API_PER_PAGE_MAX\" environment variable."
								}
							]
						},
						"description": "This endpoint allows the client to retrieve a list of articles that are uploaded with a video.\n\nIt will only return published video articles ordered by descending popularity.\n\nIt supports pagination, each page will contain 24 articles by default."
					},
					"response": [
						{
							"name": "A List of all articles with videos",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "api-key",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/videos?page=1&per_page=24",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"videos"
									],
									"query": [
										{
											"key": "page",
											"value": "1",
											"description": "Pagination page"
										},
										{
											"key": "per_page",
											"value": "24",
											"description": "Page size (the number of items to return per page). The default maximum value can be overridden by \"API_PER_PAGE_MAX\" environment variable."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"type_of\": \"<string>\",\n    \"id\": \"<long>\",\n    \"path\": \"<string>\",\n    \"cloudinary_video_url\": \"<string>\",\n    \"title\": \"<string>\",\n    \"user_id\": \"<long>\",\n    \"video_duration_in_minutes\": \"<string>\",\n    \"video_source_url\": \"<string>\",\n    \"user\": {\n      \"name\": \"<string>\"\n    }\n  },\n  {\n    \"type_of\": \"<string>\",\n    \"id\": \"<long>\",\n    \"path\": \"<string>\",\n    \"cloudinary_video_url\": \"<string>\",\n    \"title\": \"<string>\",\n    \"user_id\": \"<long>\",\n    \"video_duration_in_minutes\": \"<string>\",\n    \"video_source_url\": \"<string>\",\n    \"user\": {\n      \"name\": \"<string>\"\n    }\n  }\n]"
						}
					]
				}
			]
		},
		{
			"name": "Forem API Tests",
			"item": [
				{
					"name": "TC_API_001",
					"item": [
						{
							"name": "TC_API_001 - Pagination",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Pre-request Script\r",
											"pm.environment.set(\"currentPage\", \"1\");\r",
											"\r",
											"// Test Script\r",
											"pm.test(\"Mã trạng thái là 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Danh sách bài viết\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.be.an(\"array\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/articles?page={{currentPage}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"articles"
									],
									"query": [
										{
											"key": "page",
											"value": "{{currentPage}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "TC_API_002",
					"item": [
						{
							"name": "TC_API_002 - Filter by Tag",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Mã trạng thái là 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Bài viết có tag\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    if (jsonData.length > 0) {\r",
											"        jsonData.forEach(article => {\r",
											"            const tags = article.tag_list || [];\r",
											"            pm.expect(tags).to.include(pm.variables.get(\"currentTag\"));\r",
											"        });\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/articles?tag={{currentTag}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"articles"
									],
									"query": [
										{
											"key": "tag",
											"value": "{{currentTag}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "TC_API_003",
					"item": [
						{
							"name": "TC_API_003 - Search Articles",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Pre-request Script\r",
											"pm.environment.set(\"searchParam\", \"username\");\r",
											"pm.environment.set(\"searchValue\", \"dev\");\r",
											"\r",
											"// Test Script\r",
											"pm.test(\"Mã trạng thái là 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Danh sách bài viết\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.be.an(\"array\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/articles?{{searchParam}}={{searchValue}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"articles"
									],
									"query": [
										{
											"key": "{{searchParam}}",
											"value": "{{searchValue}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "TC_API_004",
					"item": [
						{
							"name": "TC_API_004 - List Organizations",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"pm.test(\"Mã trạng thái trả về phải là 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Phải lấy được danh sách tổ chức (kiểu mảng)\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.be.an('array');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/articles?username={{orgUsername}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"articles"
									],
									"query": [
										{
											"key": "username",
											"value": "{{orgUsername}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "TC_API_005",
					"item": [
						{
							"name": "TC_API_005 - Get Organization Details",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.environment.set(\"orgUsername\", \"thepracticaldev\");\r",
											"\r",
											"\r",
											"pm.test(\"Mã trạng thái là 404\", function () {\r",
											"    pm.response.to.have.status(404); \r",
											"});\r",
											"\r",
											"pm.test(\"Không có thông tin tổ chức khi 404\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"error\", \"not found\", \"Response phải có lỗi 'not found'\");\r",
											"    pm.expect(jsonData).to.have.property(\"status\", 404, \"Status phải là 404\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/organizations/{{orgUsername}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"organizations",
										"{{orgUsername}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "key",
				"value": "api-key",
				"type": "string"
			},
			{
				"key": "value",
				"value": "{{apiKey}}",
				"type": "string"
			},
			{
				"key": "in",
				"value": "header",
				"type": "string"
			}
		]
	},
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://dev.to/api"
		}
	]
}