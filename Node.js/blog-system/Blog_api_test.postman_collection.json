{
	"info": {
		"_postman_id": "911c0c19-5a8d-4c44-818f-cf7f5c62f68e",
		"name": "Blog_api_test",
		"description": "TEST ALL THE API FROM THE BLOG PROJECT",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "40834618"
	},
	"item": [
		{
			"name": "Setup",
			"item": [
				{
					"name": "Owner login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Set ownerToken from login response\", function () {",
									"  const jsonData = pm.response.json();",
									"  if (jsonData && jsonData.token) {",
									"    pm.environment.set(\"ownerToken\", jsonData.token);",
									"    pm.test(\"ownerToken environment variable is set\", function () {",
									"      pm.expect(pm.environment.get(\"ownerToken\")).to.be.a('string');",
									"      pm.expect(pm.environment.get(\"ownerToken\")).to.not.be.empty;",
									"    });",
									"  } else {",
									"    pm.expect.fail(\"Token not found in the response body\");",
									"  }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"thang@example.com\",\n  \"password\": \"secure_password!?\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/api/auth/login",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register Test Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"pm.environment.set(\"testUserId\", parseInt(jsonData.data.user.id, 10));",
									"",
									"pm.test(\"Set testUserId\", function () {",
									"    pm.expect(pm.environment.get(\"testUserId\")).to.be.a('number'); ",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"testuser@example.com\",\n  \"password\": \"password123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/api/register",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register Admin Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"const jsonData = pm.response.json();",
									"pm.environment.set(\"adminUserId\", jsonData.data.user.id);",
									"pm.test(\"Set adminUserId\", function () {",
									"    pm.expect(pm.environment.get(\"adminUserId\")).to.be.a('number');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{ownerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"adminuser@example.com\",\n  \"password\": \"password123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/api/admin/register",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"admin",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login Test User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"const jsonData = pm.response.json();",
									"pm.environment.set(\"userToken\", jsonData.token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"testuser@example.com\",\n  \"password\": \"password123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/api/auth/user-login",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"auth",
								"user-login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login Admin User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"const jsonData = pm.response.json();",
									"pm.environment.set(\"adminToken\", jsonData.token);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"adminuser@example.com\",\n  \"password\": \"password123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/api/auth/user-login",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"auth",
								"user-login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Empty Result",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response is an empty array\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.posts).to.be.an('array').that.is.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/api/posts",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Published Post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"const jsonData = pm.response.json();",
									"pm.environment.set(\"postId\", jsonData.data.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{ownerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Published Post for Testing\",\n  \"content\": \"Content of the published post.\",\n  \"status\": \"published\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/api/posts",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Post for Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"const jsonData = pm.response.json();",
									"pm.environment.set(\"deletePostId\", jsonData.data.id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{ownerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Published Post for Testing\",\n  \"content\": \"Content of the published post.\",\n  \"status\": \"published\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/api/posts",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Draft Post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"const jsonData = pm.response.json();",
									"pm.environment.set(\"draftPostId\", jsonData.data.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{ownerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Draft Post for Testing\",\n  \"content\": \"Content of the draft post.\",\n  \"status\": \"draft\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/api/posts",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"posts"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Owner Login",
					"item": [
						{
							"name": "Valid Credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Response has token\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('token');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"thang@example.com\",\n  \"password\": \"secure_password!?\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/auth/login",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid Email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"invalid@example.com\",\n  \"password\": \"secure_password!?\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/auth/login",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"thang@example.com\",\n  \"password\": \"wrongpassword\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/auth/login",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Missing Email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"password\": \"secure_password!?\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/auth/login",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Missing Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"thang@example.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/auth/login",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"auth",
										"login"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "User Login",
					"item": [
						{
							"name": "Valid Credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Response has token\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('token');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"testuser@example.com\",\n  \"password\": \"password123\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/auth/user-login",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"auth",
										"user-login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid Email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"invalid@example.com\",\n  \"password\": \"password123\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/auth/user-login",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"auth",
										"user-login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"testuser@example.com\",\n  \"password\": \"wrongpassword\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/auth/user-login",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"auth",
										"user-login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Missing Email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"password\": \"password123\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/auth/user-login",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"auth",
										"user-login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Missing Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"testuser@example.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/auth/user-login",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"auth",
										"user-login"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "User Registration",
					"item": [
						{
							"name": "Valid Registration",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"pm.test(\"Response has user data\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.user).to.have.property('id');",
											"    pm.expect(jsonData.data.user).to.have.property('role');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"newuser@example.com\",\n  \"password\": \"password123\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/register",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Duplicate Email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"testuser@example.com\",\n  \"password\": \"password123\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/register",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid Email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"invalidemail\",\n  \"password\": \"password123\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/register",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Missing Email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"password\": \"password123\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/register",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Short Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"newuser@example.com\",\n  \"password\": \"123\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/register",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Missing Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"newuser@example.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/register",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"register"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Admin Registration (Owner Only)",
					"item": [
						{
							"name": "Valid (as Owner)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"pm.test(\"Response has user data\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.user).to.have.property('id');",
											"    pm.expect(jsonData.data.user).to.have.property('role');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ownerToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"newadmin@example.com\",\n  \"password\": \"adminpassword123\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/admin/register",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"admin",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Unauthorized (as User)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{userToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"anotheradmin@example.com\",\n  \"password\": \"adminpassword123\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/admin/register",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"admin",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Unauthorized (as Guest)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"yetanotheradmin@example.com\",\n  \"password\": \"adminpassword123\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/admin/register",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"admin",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Duplicate Email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ownerToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"adminuser@example.com\",\n  \"password\": \"adminpassword123\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/admin/register",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"admin",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid Data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ownerToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"invalidemail\",\n  \"password\": \"adminpassword123\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/admin/register",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"admin",
										"register"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Posts",
			"item": [
				{
					"name": "Get All Posts",
					"item": [
						{
							"name": "Guest Access",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Response has posts array\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.posts).to.be.an('array');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/posts",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"posts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Owner Access",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Response includes draft posts\", function () {",
											"    const jsonData = pm.response.json();",
											"    let hasDraft = false;",
											"    for (let post of jsonData.data.posts) {",
											"        if (post.status === 'draft') {",
											"            hasDraft = true;",
											"            break;",
											"        }",
											"    }",
											"    pm.expect(hasDraft).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ownerToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/posts",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"posts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Pagination",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Response has posts array\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.posts).to.be.an('array');",
											"});",
											"pm.test(\"Check pagination\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.currentPage).to.eql(2);",
											"   pm.expect(jsonData.data.posts.length).to.be.at.most(5);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/posts?page=2&limit=5",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"posts"
									],
									"query": [
										{
											"key": "page",
											"value": "2"
										},
										{
											"key": "limit",
											"value": "5"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get Single Post",
					"item": [
						{
							"name": "Published Post (Guest)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/posts/{{postId}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"posts",
										"{{postId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Draft Post (Guest)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/posts/{{draftPostId}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"posts",
										"{{draftPostId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Published Post (Owner)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ownerToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/posts/{{postId}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"posts",
										"{{postId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Draft Post (Owner)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Post is a draft\", function () {",
											"   const jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.status).to.eql('draft')",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ownerToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/posts/{{draftPostId}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"posts",
										"{{draftPostId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Non-existent Post",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/posts/9999",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"posts",
										"9999"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Create Post (Owner Only)",
					"item": [
						{
							"name": "Valid Post",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ownerToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"title\": \"Another Test Post\",\n  \"content\": \"Content of another test post.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/posts",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"posts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Post - Invalid Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ownerToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"title\": \"Post with Invalid Status\",\n  \"content\": \"Content of the post.\",\n  \"status\": \"invalid\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/posts",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"posts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Post - Invalid File Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ownerToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "title",
											"value": "Post with Invalid Image",
											"type": "text"
										},
										{
											"key": "content",
											"value": "This post has an invalid image type.",
											"type": "text"
										},
										{
											"key": "image",
											"type": "file",
											"src": "postman-cloud:///1effe8d3-b636-4bf0-8684-b655f2b0b9a8"
										}
									]
								},
								"url": {
									"raw": "{{baseURL}}/api/posts",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"posts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Post - Exceed File Size Limit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ownerToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "title",
											"value": "Post with Large Image",
											"type": "text"
										},
										{
											"key": "content",
											"value": "This post has a very large image.",
											"type": "text"
										},
										{
											"key": "image",
											"type": "file",
											"src": "/C:/Users/chienthang/Downloads/angseng.gif"
										}
									]
								},
								"url": {
									"raw": "{{baseURL}}/api/posts",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"posts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Missing Title",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ownerToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"content\": \"Content without a title.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/posts",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"posts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Missing Content",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ownerToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"title\": \"Title without content.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/posts",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"posts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Unauthorized (as User)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{userToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"title\": \"User Post\",\n  \"content\": \"Unauthorized user post content.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/posts",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"posts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Unauthorized (as Guest)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"title\": \"Guest Post\",\n  \"content\": \"Unauthorized guest post content.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/posts",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"posts"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Update Post (Owner Only)",
					"item": [
						{
							"name": "Valid Update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ownerToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"title\": \"Updated Post Title\",\n  \"content\": \"Updated post content.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/posts/{{postId}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"posts",
										"{{postId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Post - Replace Image",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Image URL is updated\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.image_url).to.be.a('string').and.not.be.empty;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ownerToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "title",
											"value": "Updated Post with New Image",
											"type": "text"
										},
										{
											"key": "content",
											"value": "This post's image has been updated.",
											"type": "text"
										},
										{
											"key": "image",
											"type": "file",
											"src": "postman-cloud:///1effe8d3-3546-4ef0-838c-d997ebeaa7a8"
										}
									]
								},
								"url": {
									"raw": "{{baseURL}}/api/posts/{{postId}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"posts",
										"{{postId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Post - Keep Existing Image (No File Sent)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Image URL remains unchanged\", function () {",
											"  const jsonData = pm.response.json();",
											"  pm.expect(jsonData.data.image_url).to.eql(pm.environment.get(\"originalImageUrl\")); // You'll need to set originalImageUrl in a pre-request script",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Fetch the current post to get the original image URL",
											"pm.sendRequest({",
											"    url: pm.environment.get(\"baseURL\") + '/api/posts/' + pm.environment.get(\"postId\"),",
											"    method: 'GET',",
											"    header: {",
											"        'Authorization': 'Bearer ' + pm.environment.get(\"ownerToken\")",
											"    }",
											"}, function (err, res) {",
											"    if (!err && res.code === 200) {",
											"        const jsonData = res.json();",
											"        pm.environment.set(\"originalImageUrl\", jsonData.data.image_url);",
											"    } else {",
											"        console.error(\"Failed to fetch original image URL\", err);",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ownerToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "title",
											"value": "Updated Post, Image Unchanged",
											"type": "text"
										},
										{
											"key": "content",
											"value": "Image remains the same.",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseURL}}/api/posts/{{postId}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"posts",
										"{{postId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Non-existent Post",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ownerToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"title\": \"Updated Title\",\n  \"content\": \"Updated content.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/posts/9999",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"posts",
										"9999"
									]
								}
							},
							"response": []
						},
						{
							"name": "Unauthorized (as User)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{userToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"title\": \"Updated Title\",\n  \"content\": \"Updated content.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/posts/{{postId}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"posts",
										"{{postId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Unauthorized (as Guest)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"title\": \"Updated Title\",\n  \"content\": \"Updated content.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/posts/{{postId}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"posts",
										"{{postId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Search Posts",
					"item": [
						{
							"name": "Search Posts",
							"item": [
								{
									"name": "Search Posts - Special Characters",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Response has posts array or empty array\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData.data.posts).to.be.an('array');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/api/posts/search?q=test!@%23$%^",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"api",
												"posts",
												"search"
											],
											"query": [
												{
													"key": "q",
													"value": "test!@#$%^"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search Posts - Case Sensitivity",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Response has posts array or empty array\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData.data.posts).to.be.an('array');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/api/posts/search?q=testing",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"api",
												"posts",
												"search"
											],
											"query": [
												{
													"key": "q",
													"value": "testing"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search Posts - Case Sensitivity different case",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Response has posts array or empty array\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData.data.posts).to.be.an('array');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/api/posts/search?q=tEsTiNg",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"api",
												"posts",
												"search"
											],
											"query": [
												{
													"key": "q",
													"value": "tEsTiNg"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search Posts - Partial Matching",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Response has posts array\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData.data.posts).to.be.an('array');",
													"    pm.expect(jsonData.data.posts.length).to.be.greaterThan(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/api/posts/search?q=Test",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"api",
												"posts",
												"search"
											],
											"query": [
												{
													"key": "q",
													"value": "Test"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search Posts - Multiple Words",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Response has posts array or empty array\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData.data.posts).to.be.an('array');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/api/posts/search?q=test post",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"api",
												"posts",
												"search"
											],
											"query": [
												{
													"key": "q",
													"value": "test post"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search Posts - Empty Results with Pagination",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Response is an empty array\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData.data.posts).to.be.an('array').that.is.empty;",
													"});",
													"pm.test(\"Pagination data is correct\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData.data.currentPage).to.equal(2);",
													"    pm.expect(jsonData.data.totalPages).to.equal(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/api/posts/search?q=nonexistent&page=2&limit=5",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"api",
												"posts",
												"search"
											],
											"query": [
												{
													"key": "q",
													"value": "nonexistent"
												},
												{
													"key": "page",
													"value": "2"
												},
												{
													"key": "limit",
													"value": "5"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search Posts - search with draft (User)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Response has posts array\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData.data.posts).to.be.an('array');",
													"});",
													"pm.test(\"Draft posts are not included\", function () {",
													"    const jsonData = pm.response.json();",
													"    for (let post of jsonData.data.posts) {",
													"        pm.expect(post.status).to.not.equal('draft');",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{userToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/api/posts/search?q=Draft",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"api",
												"posts",
												"search"
											],
											"query": [
												{
													"key": "q",
													"value": "Draft"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Valid Search",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Response has posts array\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.posts).to.be.an('array');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/posts/search?q=demo",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"posts",
										"search"
									],
									"query": [
										{
											"key": "q",
											"value": "demo"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "No Results",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Response is an empty array\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.posts).to.be.an('array').that.is.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/posts/search?q=nonexistent",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"posts",
										"search"
									],
									"query": [
										{
											"key": "q",
											"value": "nonexistent"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Empty Query",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/posts/search?q=",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"posts",
										"search"
									],
									"query": [
										{
											"key": "q",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Owner Search (Drafts)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Response includes draft posts\", function () {",
											"    const jsonData = pm.response.json();",
											"    let hasDraft = false;",
											"    for (let post of jsonData.data.posts) {",
											"        if (post.status === 'draft') {",
											"            hasDraft = true;",
											"            break;",
											"        }",
											"    }",
											"    pm.expect(hasDraft).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ownerToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/posts/search?q=Testing",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"posts",
										"search"
									],
									"query": [
										{
											"key": "q",
											"value": "Testing"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Pagination",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Response has posts array\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.posts).to.be.an('array');",
											"});",
											"pm.test(\"Check pagination\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.currentPage).to.eql(2);",
											"   pm.expect(jsonData.data.posts.length).to.be.at.most(5);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/posts/search?q=Testing&page=2&limit=5",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"posts",
										"search"
									],
									"query": [
										{
											"key": "q",
											"value": "Testing"
										},
										{
											"key": "page",
											"value": "2"
										},
										{
											"key": "limit",
											"value": "5"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete Post (Owner Only)",
					"item": [
						{
							"name": "Valid Deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ownerToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/posts/{{deletePostId}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"posts",
										"{{deletePostId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Non-existent Post",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ownerToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/posts/9999",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"posts",
										"9999"
									]
								}
							},
							"response": []
						},
						{
							"name": "Unauthorized (as User)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{userToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/posts/{{postId}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"posts",
										"{{postId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Unauthorized (as Guest)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/posts/{{postId}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"posts",
										"{{postId}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Comments",
			"item": [
				{
					"name": "Create Comment",
					"item": [
						{
							"name": "Guest Comment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"const jsonData = pm.response.json();",
											"pm.environment.set(\"guestCommentId\", jsonData.data.id);",
											"const guestToken = jsonData.guestToken;",
											"pm.environment.set(\"guestToken\", guestToken);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"value": "guestId={{guestId}}",
										"type": "string"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"content\": \"This is a guest comment.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/posts/{{postId}}/comments",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"posts",
										"{{postId}}",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Registered User Comment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"const jsonData = pm.response.json();",
											"pm.environment.set(\"userCommentId\", jsonData.data.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{userToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"content\": \"This is a user comment.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/posts/{{postId}}/comments",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"posts",
										"{{postId}}",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Missing Content",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/posts/{{postId}}/comments",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"posts",
										"{{postId}}",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Non-existent Post",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"content\": \"Comment for a non-existent post.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/posts/9999/comments",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"posts",
										"9999",
										"comments"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get Comments for Post",
					"item": [
						{
							"name": "Valid Post Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Response has comments array\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.comments).to.be.an('array');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/posts/{{postId}}/comments",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"posts",
										"{{postId}}",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Non-existent Post",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/posts/9999/comments",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"posts",
										"9999",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Pagination",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Response has comments array\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.comments).to.be.an('array');",
											"});",
											"pm.test(\"Check pagination\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.currentPage).to.eql(2);",
											"    pm.expect(jsonData.data.comments.length).to.be.at.most(2);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/posts/{{postId}}/comments?page=2&limit=2",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"posts",
										"{{postId}}",
										"comments"
									],
									"query": [
										{
											"key": "page",
											"value": "2"
										},
										{
											"key": "limit",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Comment Pagination - Empty Page",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Response is an empty array\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.comments).to.be.an('array').that.is.empty;",
											"});",
											"pm.test(\"Pagination data is correct\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.currentPage).to.equal(5);",
											"    pm.expect(jsonData.data.totalPages).to.equal(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/posts/{{postId}}/comments?page=5&limit=2",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"posts",
										"{{postId}}",
										"comments"
									],
									"query": [
										{
											"key": "page",
											"value": "5"
										},
										{
											"key": "limit",
											"value": "2"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get Single Comment",
					"item": [
						{
							"name": "Valid Comment",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: 'http://localhost:3000/api/posts/1/comments', // Use your post ID here\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({ content: 'Initial comment for update test' })\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.error(\"Error creating comment:\", err);\r",
											"    } else {\r",
											"        const commentData = res.json();\r",
											"        if (commentData && commentData.data && commentData.data.id) {\r",
											"            pm.environment.set(\"commentIdForUpdateTest\", commentData.data.id);\r",
											"        } else {\r",
											"            console.error(\"Could not get comment ID from creation response:\", commentData);\r",
											"        }\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/comments/{{commentIdForUpdateTest}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"comments",
										"{{commentIdForUpdateTest}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Non-existent Comment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/comments/9999",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"comments",
										"9999"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Update Comment",
					"item": [
						{
							"name": "Guest Update (Own)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Check content update\", () => {",
											"  const jsonData = pm.response.json();",
											"  pm.expect(jsonData.data.content).to.eql(\"New content\");",
											"",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"value": "guestId={{guestId}}",
										"type": "string"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n \"content\": \"New content\",\n \"guestToken\": \"{{guestToken}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/comments/{{guestCommentId}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"comments",
										"{{guestCommentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Guest Update (Other)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"value": "guestId={{guestId}}",
										"type": "string"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n \"content\": \"New content\",\n \"guestToken\": \"{{guestToken}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/comments/{{userCommentId}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"comments",
										"{{userCommentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "User Update (Own)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Check content update\", () => {",
											"  const jsonData = pm.response.json();",
											"  pm.expect(jsonData.data.content).to.eql(\"New content\");",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{userToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n \"content\": \"New content\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/comments/{{userCommentId}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"comments",
										"{{userCommentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "User Update (Other)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{userToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n \"content\": \"New content\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/comments/{{guestCommentId}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"comments",
										"{{guestCommentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Admin Update (Any)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Check content update\", () => {",
											"  const jsonData = pm.response.json();",
											"  pm.expect(jsonData.data.content).to.eql(\"New content\");",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n \"content\": \"New content\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/comments/{{guestCommentId}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"comments",
										"{{guestCommentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Non-existent Comment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"content\": \"Trying to update a non-existent comment.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/comments/9999",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"comments",
										"9999"
									]
								}
							},
							"response": []
						},
						{
							"name": "Missing Content",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{userToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/comments/{{userCommentId}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"comments",
										"{{userCommentId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete Comment",
					"item": [
						{
							"name": "User Delete (Other)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{userToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/comments/{{guestCommentId}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"comments",
										"{{guestCommentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Guest Delete (Other)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Cookie",
										"value": "guestId={{guestId}}",
										"type": "string"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n \"guestToken\": \"{{guestToken}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/comments/{{userCommentId}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"comments",
										"{{userCommentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Guest Delete (Own)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Cookie",
										"value": "guestId={{guestId}}",
										"type": "string"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n \"guestToken\": \"{{guestToken}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/comments/{{guestCommentId}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"comments",
										"{{guestCommentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "User Delete (Own)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{userToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/comments/{{userCommentId}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"comments",
										"{{userCommentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Admin Delete (Any)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: 'http://localhost:3000/api/posts/1/comments', // Assuming you have postId environment variable set\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({ content: 'Guest comment for admin/owner delete test' })\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.error(\"Error creating guest comment:\", err);\r",
											"        // Optionally, you might want to fail the test here if comment creation fails\r",
											"        // pm.test(\"Failed to create guest comment\", () => {\r",
											"        //     pm.expect.fail(\"Guest comment creation failed: \" + err);\r",
											"        // });\r",
											"    } else {\r",
											"        const responseJson = res.json();\r",
											"        if (responseJson && responseJson.data && responseJson.data.id) {\r",
											"            pm.environment.set(\"testUserCommentId\", responseJson.data.id);\r",
											"            pm.test(\"Guest comment created and testUserCommentId set\", () => {\r",
											"                pm.expect(pm.environment.get(\"testUserCommentId\")).to.be.ok;\r",
											"            });\r",
											"        } else {\r",
											"            console.error(\"Error: Could not extract comment ID from response:\", responseJson);\r",
											"            // Optionally, fail the test if comment ID is not found\r",
											"            // pm.test(\"Failed to get comment ID\", () => {\r",
											"            //     pm.expect.fail(\"Could not get comment ID from response: \" + JSON.stringify(responseJson));\r",
											"            // });\r",
											"        }\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/comments/{{testUserCommentId}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"comments",
										"{{testUserCommentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Non-existent Comment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/comments/9999",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"comments",
										"9999"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Likes",
			"item": [
				{
					"name": "Like/Dislike Post",
					"item": [
						{
							"name": "Like (Guest)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 or 201\", function () {",
											"    pm.expect([200, 201]).to.include(pm.response.code);",
											"});",
											"pm.test(\"Like type is correct\", () => {",
											"  const jsonData = pm.response.json();",
											"  pm.expect(jsonData.data.like_type).to.eql('like');",
											"  if(pm.response.code === 201){",
											"      pm.environment.set(\"likeId\", jsonData.data.id);",
											"  }",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"value": "guestId={{guestId}}",
										"type": "string"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n \"like_type\": \"like\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/posts/{{postId}}/likes",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"posts",
										"{{postId}}",
										"likes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Dislike (Guest)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 or 201\", function () {",
											"    pm.expect([200, 201]).to.include(pm.response.code);",
											"});",
											"pm.test(\"Like type is correct\", () => {",
											"  const jsonData = pm.response.json();",
											"  pm.expect(jsonData.data.like_type).to.eql('dislike');",
											"  if(pm.response.code === 201){",
											"      pm.environment.set(\"likeId\", jsonData.data.id);",
											"  }",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"value": "guestId={{guestId}}",
										"type": "string"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n \"like_type\": \"dislike\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/posts/{{postId}}/likes",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"posts",
										"{{postId}}",
										"likes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Like (User)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 or 201\", function () {",
											"    pm.expect([200, 201]).to.include(pm.response.code);",
											"});",
											"pm.test(\"Like type is correct\", () => {",
											"  const jsonData = pm.response.json();",
											"  pm.expect(jsonData.data.like_type).to.eql('like');",
											"  if(pm.response.code === 201){",
											"      pm.environment.set(\"likeId\", jsonData.data.id);",
											"  }",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{userToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n \"like_type\": \"like\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/posts/{{postId}}/likes",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"posts",
										"{{postId}}",
										"likes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Dislike (User)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 or 201\", function () {",
											"    pm.expect([200, 201]).to.include(pm.response.code);",
											"});",
											"pm.test(\"Like type is correct\", () => {",
											"  const jsonData = pm.response.json();",
											"  pm.expect(jsonData.data.like_type).to.eql('dislike');",
											"  if(pm.response.code === 201){",
											"      pm.environment.set(\"likeId\", jsonData.data.id);",
											"  }",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{userToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n \"like_type\": \"dislike\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/posts/{{postId}}/likes",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"posts",
										"{{postId}}",
										"likes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Non-existent Post",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n \"like_type\": \"like\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/posts/9999/likes",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"posts",
										"9999",
										"likes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid Like Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n \"like_type\": \"invalid\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/posts/{{postId}}/likes",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"posts",
										"{{postId}}",
										"likes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Duplicate Like (Guest/User) - Expect 200",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Like type is correct\", () => {",
											"  const jsonData = pm.response.json();",
											"  pm.expect(jsonData.data.like_type).to.eql('like');",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"value": "guestId={{guestId}}",
										"type": "string"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n \"like_type\": \"like\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/posts/{{postId}}/likes",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"posts",
										"{{postId}}",
										"likes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Like - Race Condition (Multiple Concurrent Likes)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 or 201\", function () {",
											"    pm.expect([200, 201]).to.include(pm.response.code);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"value": "guestId={{guestId}}",
										"type": "string"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n \"like_type\": \"like\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/posts/{{postId}}/likes",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"posts",
										"{{postId}}",
										"likes"
									]
								}
							},
							"response": []
						},
						{
							"name": "DisLike - Race Condition (Multiple Concurrent Likes)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 or 201\", function () {",
											"    pm.expect([200, 201]).to.include(pm.response.code);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"value": "guestId={{guestId}}",
										"type": "string"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n \"like_type\": \"dislike\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/posts/{{postId}}/likes",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"posts",
										"{{postId}}",
										"likes"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete Like/Dislike",
					"item": [
						{
							"name": "Delete (Guest)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Cookie",
										"value": "guestId={{guestId}}",
										"type": "string"
									}
								],
								"url": {
									"raw": "{{baseURL}}/api/posts/{{postId}}/likes",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"posts",
										"{{postId}}",
										"likes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete (User)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{userToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/posts/{{postId}}/likes",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"posts",
										"{{postId}}",
										"likes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Non-existent Like",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Cookie",
										"value": "guestId={{guestId}}",
										"type": "string"
									}
								],
								"url": {
									"raw": "{{baseURL}}/api/posts/{{postId}}/likes",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"posts",
										"{{postId}}",
										"likes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Non-existent Post",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/posts/9999/likes",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"posts",
										"9999",
										"likes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Double Deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Cookie",
										"value": "guestId={{guestId}}",
										"type": "string"
									}
								],
								"url": {
									"raw": "{{baseURL}}/api/posts/{{postId}}/likes",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"posts",
										"{{postId}}",
										"likes"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Profiles",
			"item": [
				{
					"name": "Get Own Profile (Registered User)",
					"item": [
						{
							"name": "Valid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{userToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/profile",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"profile"
									]
								}
							},
							"response": []
						},
						{
							"name": "Unauthorized (Guest)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/profile",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"profile"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Update Own Profile",
					"item": [
						{
							"name": "Valid Update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Check property update\", () => {",
											"  const jsonData = pm.response.json();",
											"  pm.expect(jsonData.data.name).to.eql(\"New Name\")",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{userToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n \"name\": \"New Name\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/profile",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"profile"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Profile - Valid Avatar Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Avatar URL is updated\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.avatar).to.be.a('string').and.not.be.empty;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{userToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "name",
											"value": "User with New Avatar",
											"type": "text"
										},
										{
											"key": "avatar",
											"type": "file",
											"src": "postman-cloud:///1effe8d3-3546-4ef0-838c-d997ebeaa7a8"
										}
									]
								},
								"url": {
									"raw": "{{baseURL}}/api/profile",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"profile"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Profile - Invalid Avatar File Type Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{userToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "name",
											"value": "User with Invalid Avatar",
											"type": "text"
										},
										{
											"key": "avatar",
											"type": "file",
											"src": "postman-cloud:///1effe8d3-b636-4bf0-8684-b655f2b0b9a8"
										}
									]
								},
								"url": {
									"raw": "{{baseURL}}/api/profile",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"profile"
									]
								}
							},
							"response": []
						},
						{
							"name": "Unauthorized (Guest)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n \"name\": \"New Name\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/profile",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"profile"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "View Any Profile",
					"item": [
						{
							"name": "Valid User Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/users/{{testUserId}}/profile",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"users",
										"{{testUserId}}",
										"profile"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid/Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/users/9999/profile",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"users",
										"9999",
										"profile"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Update Any Profile (Admin/Owner)",
					"item": [
						{
							"name": "Update Post",
							"item": [
								{
									"name": "Update Post - Partial Title Update",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Only title is updated\", function () {",
													"   const jsonData = pm.response.json();",
													"   pm.expect(jsonData.data.title).to.eql(\"New Title Only\");",
													"   pm.expect(jsonData.data.content).to.not.eql(\"New Content Only\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ownerToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"title\": \"New Title Only\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/api/posts/{{postId}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"api",
												"posts",
												"{{postId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Post - Partial Content Update",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Only content is updated\", function () {",
													"     const jsonData = pm.response.json();",
													"     pm.expect(jsonData.data.content).to.eql(\"New Content Only\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ownerToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"content\": \"New Content Only\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/api/posts/{{postId}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"api",
												"posts",
												"{{postId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Post - Status Change (Draft to Published)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Status is updated to published\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData.data.status).to.eql(\"published\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ownerToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"status\": \"published\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/api/posts/{{draftPostId}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"api",
												"posts",
												"{{draftPostId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Post - Status Change (Published to Draft)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Status is updated to draft\", function () {",
													"    const jsonData = pm.response.json();",
													"     pm.expect(jsonData.data.status).to.eql(\"draft\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ownerToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"status\": \"draft\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/api/posts/{{postId}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"api",
												"posts",
												"{{postId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Post - Invalid Status",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ownerToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"status\": \"invalid\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/api/posts/{{postId}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"api",
												"posts",
												"{{postId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Valid (as Admin)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Check property update\", () => {",
											"  const jsonData = pm.response.json();",
											"  pm.expect(jsonData.data.name).to.eql(\"New Name By Admin\")",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n \"name\": \"New Name By Admin\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/admin/users/{{testUserId}}/profile",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"admin",
										"users",
										"{{testUserId}}",
										"profile"
									]
								}
							},
							"response": []
						},
						{
							"name": "Unauthorized (as User)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{userToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n \"name\": \"New Name By User\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/admin/users/{{testUserId}}/profile",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"admin",
										"users",
										"{{testUserId}}",
										"profile"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete Own Profile",
					"item": [
						{
							"name": "Valid (Registered User)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{userToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/profile",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"profile"
									]
								}
							},
							"response": []
						},
						{
							"name": "Unauthorized (Guest)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/profile",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"profile"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete Any Profile (Admin/Owner)",
					"item": [
						{
							"name": "Valid (as Admin)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/admin/users/{{adminUserId}}/profile",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"admin",
										"users",
										"{{adminUserId}}",
										"profile"
									]
								}
							},
							"response": []
						},
						{
							"name": "Unauthorized (as User)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{userToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/admin/users/{{adminUserId}}/profile",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"admin",
										"users",
										"{{adminUserId}}",
										"profile"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Admin",
			"item": [
				{
					"name": "Get All Users (Admin/Owner)",
					"item": [
						{
							"name": "Valid (as Admin)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Response has users array\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.users).to.be.an('array');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/admin/users",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"admin",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Unauthorized (as User)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{userToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/admin/users",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"admin",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Unauthorized (as Guest)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/admin/users",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"admin",
										"users"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "General API",
			"item": [
				{
					"name": "Health Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/api/health",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"health"
							]
						}
					},
					"response": []
				},
				{
					"name": "Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {",
									"    pm.response.to.have.status(500);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/api/nonexistent-route",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"nonexistent-route"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseURL",
			"value": "http://localhost:3000",
			"type": "string"
		},
		{
			"key": "ownerToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "adminToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "userToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "postId",
			"value": "1",
			"type": "default"
		},
		{
			"key": "draftPostId",
			"value": "2",
			"type": "default"
		}
	]
}