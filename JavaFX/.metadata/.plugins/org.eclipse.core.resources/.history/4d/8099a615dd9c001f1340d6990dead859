package xepSo;

import java.awt.Font;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.control.Button;
import javafx.scene.control.ComboBox;
import javafx.scene.control.Label;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;

public class GiaoDien {
    private Stage sanKhau; // Cửa sổ chính nơi các cảnh sẽ được hiển thị
    private Scene canhVat1, canhVat2; // Hai cảnh cho các giao diện trò chơi khác nhau

    private GridPane gridPage; // Bố cục dạng lưới để sắp xếp các nút theo dạng lưới
    private short n = 100; // Kích thước cơ bản cho các thành phần giao diện

    private byte m = 10; // Kích thước lưới mặc định, đặt thành 10x10
    private Button[][] b = new Button[m][m]; // Mảng 2D để chứa các nút cho mỗi ô trong lưới
    private byte[][] a = new byte[m][m]; // Mảng 2D để lưu trữ giá trị cho mỗi ô trong lưới

    private byte hang; // Chỉ số hàng cho ô trống (nếu có)
    private byte cot; // Chỉ số cột cho ô trống (nếu có)

    private ComboBox<String> cbKichThuoc; // ComboBox để chọn kích thước lưới
    private ComboBox<String> cbCachSapXep; // ComboBox để chọn kiểu sắp xếp

    private byte cachSapXep; // Biến để lưu kiểu sắp xếp đã chọn

    // Hàm khởi tạo để khởi tạo cửa sổ chính
    public GiaoDien(Stage sanKhau) {
        this.sanKhau = sanKhau;
    }

    // Phương thức để hiển thị màn hình cài đặt ban đầu của trò chơi
    public void hienThi() {
        // Nhãn để hiển thị tiêu đề của phần tùy chọn
        Label labelTitle = new Label("Tùy chọn ban đầu: ");

        // ComboBox để chọn kích thước lưới
        cbKichThuoc = new ComboBox<String>();
        cbKichThuoc.getItems().addAll("3x3", "4x4", "5x5", "6x6", "7x7", "8x8", "9x9"); // Các kích thước lưới có sẵn
        cbKichThuoc.setPromptText("Chọn số ô của trò chơi"); // Văn bản gợi ý cho ComboBox
        cbKichThuoc.setPrefWidth(n * 3); // Đặt chiều rộng ưu tiên của ComboBox

        // ComboBox để chọn kiểu sắp xếp
        cbCachSapXep = new ComboBox<String>();
        cbCachSapXep.getItems().addAll(
                "1.Tăng theo hàng từ trái sang phải", // Sắp xếp theo hàng từ trái sang phải
                "2.Tăng theo cột từ trên xuống dưới", // Sắp xếp theo cột từ trên xuống dưới
                "3.Tăng hàng Zig-Zag" // Sắp xếp theo kiểu zig-zag
        );
        cbCachSapXep.setPromptText("Chọn cách chơi - Cách sắp xếp"); // Văn bản gợi ý cho ComboBox sắp xếp
        cbCachSapXep.setPrefWidth(n * 3); // Đặt chiều rộng ưu tiên của ComboBox

        // Nút để xác nhận lựa chọn
        Button buttonOK;
        buttonOK = new Button("OK"); // Văn bản của nút
        buttonOK.setPrefWidth(n * 3); // Đặt chiều rộng ưu tiên của nút

        // Bố cục VBox để sắp xếp các thành phần giao diện theo chiều dọc
        VBox vbox = new VBox();
        vbox.getChildren().addAll(labelTitle, cbKichThuoc, cbCachSapXep, buttonOK); // Thêm các thành phần vào VBox
        canhVat1 = new Scene(vbox, n * 2.1, n * 0.93); // Tạo cảnh với chiều rộng và chiều cao được chỉ định

        // Thiết lập cảnh trên sân khấu chính và cấu hình các thuộc tính của sân khấu
        sanKhau.setScene(canhVat1); // Hiển thị canhVat1 trên sân khấu chính
        sanKhau.setTitle("Cài đặt"); // Đặt tiêu đề của cửa sổ chính
        sanKhau.setResizable(false); // Ngăn không cho cửa sổ thay đổi kích thước
        sanKhau.show(); // Hiển thị cửa sổ
    }

    public void hienThi2() {
        gridPage = new GridPane(); // Sửa lại tên biến thành gridPage
        gridPage.setPadding(new Insets(5));
        gridPage.setHgap(3);
        gridPage.setVgap(3);

        // Kiểm tra và thiết lập kích thước lưới
        m = Byte.parseByte(cbKichThuoc.getValue().substring(0, 1)); // Lấy giá trị số ô từ ComboBox
        cachSapXep = Byte.parseByte(cbCachSapXep.getValue().substring(0, 1)); // Lấy giá trị cách sắp xếp

        for (byte i = 0; i < m; i++) {
            for (byte j = 0; j < m; j++) {
                b[i][j] = new Button("" + a[i][j]);
                b[i][j].setPrefSize(n, n);
                b[i][j].setFont(Font.font("Serif", FontWeight.BOLD, FontPosture.REGULAR, 35));
                gridPage.add(b[i][j], j, i);
            }
        }

        b[hang][cot].setText("");

        canhVat2 = new Scene(gridPage, m * n, m * n);

        sanKhau.setScene(canhVat2);
        sanKhau.setTitle("Xếp số: " + cbCachSapXep.getValue());
    }

    public void xuLyButtonOK(Button buttonOK) {
        buttonOK.setOnAction(e -> {
            if (cbKichThuoc.getValue() != null && cbCachSapXep.getValue() != null) {
                if (cbKichThuoc.getValue().equals("3x3") && cbCachSapXep.getValue().charAt(0) == '1') {
                    hienThi2();
                } else {
                    thongBao("Tùy chọn này chưa được cài đặt. Bạn cần: "
                            + "\n   - Chọn ô số: 3x3"
                            + "\n   - Chọn cách chơi: 1.Tăng theo hàng");
                }
            } else {
                thongBao("Bạn chưa chọn Số ô hoặc Cách chơi.");
            }
        });
    }

    public void thongBao(String message) {
        Alert alert = new Alert(AlertType.INFORMATION);
        alert.setTitle("Thông báo");
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }
}
s